  #include "DCD.h"
  #include "cmath"

  //Phasespace points
  void PS_points(DIdeform::R4vector &p1,
                 DIdeform::R4vector &p2,
                 DIdeform::R4vector &p3,
                 DIdeform::R4vector &p4,
                 int seed,
                 double angle = M_PI / 2.)
  {
      switch (seed)
      {
      case 1666:
      {
          //seed 666
          p1 = DIdeform::R4vector({-4.7213384875835902e+02, -0.0000000000000000e+00, -0.0000000000000000e+00, -4.6142211817746778e+02});
          p2 = DIdeform::R4vector({-5.0290194983056193e+02, -0.0000000000000000e+00, -0.0000000000000000e+00, 4.6142211817746778e+02});
          p3 = DIdeform::R4vector({4.5162178137689028e+02, -3.3466005003229913e+02, -1.3177690342268895e+00, -4.4307423883444024e+01});
          p4 = DIdeform::R4vector({5.2341401721203044e+02, 3.3466005003229913e+02, 1.3177690342268895e+00, 4.4307423883444024e+01});
      }
      break;

      case 12:
      {
          //seeds 2 massive
          p1 = DIdeform::R4vector({-4.7809952420694083e+02, -0.0000000000000000e+00, -0.0000000000000000e+00, -4.6752449673455959e+02});
          p2 = DIdeform::R4vector({-5.0850678957797919e+02, -0.0000000000000000e+00, -0.0000000000000000e+00, 4.6752449673455959e+02});
          p3 = DIdeform::R4vector({4.5782801395958194e+02, 1.3758384614384497e+02, 8.1217573038820291e+01, -3.0672606911725950e+02});
          p4 = DIdeform::R4vector({5.2877829982533808e+02, -1.3758384614384497e+02, -8.1217573038820291e+01, 3.0672606911725950e+02});
      }
      break;

      case 22:
      {
          //seeds 2 massless
          p1 = DIdeform::R4vector({-4.8678217388064405e+02, -0.0000000000000000e+00, -0.0000000000000000e+00, -4.8678217388064405e+02});
          p2 = DIdeform::R4vector({-4.8678217388064405e+02, -0.0000000000000000e+00, -0.0000000000000000e+00, 4.8678217388064405e+02});
          p3 = DIdeform::R4vector({4.8678217388064405e+02, 1.9365322696179936e+02, 1.1431607376733305e+02, -4.3172577844468481e+02});
          p4 = DIdeform::R4vector({4.8678217388064405e+02, -1.9365322696179936e+02, -1.1431607376733305e+02, 4.3172577844468481e+02});
      }
      break;

      case 133:
      {
          //seed 33 massive
          p1 = DIdeform::R4vector({-4.3403531061888162e+02, -0.0000000000000000e+00, -0.0000000000000000e+00, -4.2235843884552497e+02});
          p2 = DIdeform::R4vector({-4.6731857534665693e+02, -0.0000000000000000e+00, -0.0000000000000000e+00, 4.2235843884552497e+02});
          p3 = DIdeform::R4vector({4.1184646746703140e+02, -3.7233508163465089e+01, 2.1500619135292814e+02, 1.7889526632871485e+02});
          p4 = DIdeform::R4vector({4.8950741849850709e+02, 3.7233508163465089e+01, -2.1500619135292814e+02, -1.7889526632871485e+02});
      }
      break;
      case 233:
      {
          //seed 33 massless
          p1 = DIdeform::R4vector({-3.9756551766525951e+02, -0.0000000000000000e+00, -0.0000000000000000e+00, -3.9756551766525951e+02});
          p2 = DIdeform::R4vector({-3.9756551766525951e+02, -0.0000000000000000e+00, -0.0000000000000000e+00, 3.9756551766525951e+02});
          p3 = DIdeform::R4vector({3.9756551766525951e+02, -5.2461217332126608e+01, 3.0293912899098285e+02, 2.5205960731275806e+02});
          p4 = DIdeform::R4vector({3.9756551766525951e+02, 5.2461217332126608e+01, -3.0293912899098285e+02, -2.5205960731275806e+02});
      }
      break;

      default:
      {
          //Angular seeds
          p1 = DIdeform::R4vector({-0.5, -0.5, 0.0, 0.0});
          p2 = DIdeform::R4vector({-0.5, 0.5, 0.0, 0.0});
          p3 = DIdeform::R4vector({0.5, -0.5 * std::cos(angle), -0.5 * std::sin(angle), 0.0});
          p4 = DIdeform::R4vector({0.5, 0.5 * std::cos(angle), 0.5 * std::sin(angle), 0.0});
      }
      break;
      }
  }

 