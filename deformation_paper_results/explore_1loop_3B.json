{
    "1574709672.3050053": {
        "hyperparameters": {
            "Deformation": {
                "additive": {
                    "a_ij": 0.01,
                    "a_ijs": [],
                    "mode": "exponential"
                },
                "fixed": {
                    "M_ij": 1.0,
                    "a_ijs": [],
                    "delta": 0.3,
                    "include_normal_source": false,
                    "local": false,
                    "m_ijs": [],
                    "mode": "hyperbolic",
                    "normalisation_of_subspace_components": true,
                    "normalisation_per_number_of_sources": true,
                    "normalize_per_source": false,
                    "sigma": 0.0,
                    "source_dampening_factor": -0.0005
                },
                "lambdas": [],
                "max_iterations": 1,
                "normalize_on_E_surfaces_m": -1.0,
                "overall_scaling": "constant",
                "overall_scaling_constant": 1.0,
                "scaling": {
                    "branch_cut_m": -1.0,
                    "cut_propagator_check": false,
                    "expansion_check": true,
                    "expansion_check_strategy": "ratio",
                    "expansion_threshold": -0.3,
                    "lambda": 10.0,
                    "non_cut_propagator_check": true,
                    "pole_check_strategy": "real_solution",
                    "positive_cut_check": true,
                    "skip_hyperboloids": true,
                    "softmin_sigma": 0.0,
                    "source_branch_cut_m": -1.0,
                    "source_branch_cut_multiplier": 0.8,
                    "source_branch_cut_threshold": 0.8,
                    "theta_c": 2.0,
                    "theta_r_in": 2.0,
                    "theta_r_out": 2.0
                },
                "stability_threshold": -1
            },
            "General": {
                "absolute_precision": 1e+99,
                "amplitude": "",
                "cut_filter": [],
                "debug": 0,
                "deformation_strategy": "fixed",
                "integration_statistics": false,
                "log_file_prefix": "stats/statistics",
                "log_points_to_screen": false,
                "log_stats_to_screen": false,
                "minimal_precision_for_returning_result": 2.0,
                "mu_uv_sq_re_im": [
                    10000.0,
                    0
                ],
                "multi_channeling": false,
                "multi_channeling_channel": null,
                "num_digits_different_for_inconsistency": 10.0,
                "numerical_instability_check": true,
                "numerical_threshold": 0.0,
                "python_numerator": null,
                "relative_precision": 3.0,
                "res_file_prefix": "",
                "screen_log_core": 1,
                "statistics_interval": 100000,
                "topology": "Box",
                "unstable_point_warning_percentage": 1.0,
                "use_collinear_ct": false,
                "use_ct": false
            },
            "Integrator": {
                "border": 0.001,
                "eps_abs": 0.0,
                "eps_rel": 1e-08,
                "flatness": 50.0,
                "integrated_phase": "both",
                "integrator": "vegas",
                "keep_state_file": false,
                "max_pass": 5,
                "maxchisq": 0.0,
                "mindeviation": 0.025,
                "n_increase": 100000,
                "n_max": 10000000000,
                "n_min": 2,
                "n_new": 100000,
                "n_start": 100000,
                "n_vec": 1,
                "refine_n_points": 0,
                "refine_n_runs": 0,
                "reset_vegas_integrator": true,
                "seed": 1,
                "state_filename_prefix": null,
                "survey_n_iterations": 0,
                "survey_n_points": 0,
                "use_only_last_sample": false
            },
            "Parameterization": {
                "b": 1.0,
                "input_rescaling": [
                    [
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ]
                    ],
                    [
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ]
                    ],
                    [
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ]
                    ],
                    [
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ]
                    ],
                    [
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ]
                    ],
                    [
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ]
                    ]
                ],
                "mapping": "linear",
                "mode": "spherical",
                "shifts": [
                    [
                        1.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        1.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        1.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        1.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        1.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        1.0,
                        0.0,
                        0.0,
                        0.0
                    ]
                ]
            }
        },
        "diff": "diff --git a/LTD/ltd_commons.py b/LTD/ltd_commons.py\nindex 328aa81..ae096ac 100755\n--- a/LTD/ltd_commons.py\n+++ b/LTD/ltd_commons.py\n@@ -135,9 +135,9 @@ hyperparameters = HyperParameters({\n             'source_branch_cut_multiplier' : 0.8,\n             # the strategy can be real_solution (the old method), exact (for 1 loop), and tangent_check\n             'pole_check_strategy'       : 'real_solution',\n-            'theta_r_out'               : 10.,\n-            'theta_r_in'                : 10.,\n-            'theta_c'                   : 10.,\n+            'theta_r_out'               : 2.,\n+            'theta_r_in'                : 2.,\n+            'theta_c'                   : 2.,\n         },\n \n         'additive'              :   {\ndiff --git a/benchmark.py b/benchmark.py\nindex f9c6bb0..1e3fb00 100755\n--- a/benchmark.py\n+++ b/benchmark.py\n@@ -382,7 +382,53 @@ class Benchmark(list):\n \n         for topo in explore_1loop:\n             #res.append(BenchmarkRun1loop(topo, samples=50*Units.M))\n-            res.append(BenchmarkRun2loop(topo, n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+            res.append(BenchmarkRun2loop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+        return res\n+\n+    def get_explore_HigherLoop(self):\n+        res = []\n+\n+        # 1-loop topologies\n+        res.extend(self.get_1loop())\n+\n+        # 2-loop topologies\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_A\", n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_B\", n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_C\", n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_D\", n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_E\", n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_F\", n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+        res.append(BenchmarkRun2loop(\"T3_DoubleBox_Weinzierl\",n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+\n+        # 3-loop topologies\n+        res.append(BenchmarkRun3loop(\"T4_TripleBox_Weinzierl\",n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+\n+        # 4-loop topologies\n+        res.append(BenchmarkRunHighloop(\"T4_Quadruple_Box_Weinzierl\",n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+\n+        return res\n+\n+    def get_explore_HigherLoop_low_stat(self):\n+        res = []\n+\n+        # 1-loop topologies\n+        res.extend(self.get_1loop())\n+\n+        # 2-loop topologies\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_A\", n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_B\", n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_C\", n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_D\", n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_E\", n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_F\", n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+        res.append(BenchmarkRun2loop(\"T3_DoubleBox_Weinzierl\",n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+\n+        # 3-loop topologies\n+        res.append(BenchmarkRun3loop(\"T4_TripleBox_Weinzierl\",n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+\n+        # 4-loop topologies\n+        res.append(BenchmarkRunHighloop(\"T4_Quadruple_Box_Weinzierl\",n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+\n         return res\n \n     def get_short_Valentin(self):\n@@ -459,7 +505,8 @@ class Benchmark(list):\n ]\n         for topo in PS1PS2_1loop:\n             #res.append(BenchmarkRun1loop(topo, samples=50*Units.M))\n-            res.append(BenchmarkRun2loop(topo, n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+            res.append(BenchmarkRun2loop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+            #res.append(BenchmarkRun2loop(topo, n_start=1000*Units.K, n_increase=100*Units.K, samples=1000*Units.M))\n         return res\n \n     def get_PS1PS2_2loop(self):\n@@ -514,7 +561,7 @@ class Benchmark(list):\n \n ]\n         for topo in PS1PS2_2loop:\n-            res.append(BenchmarkRun2loop(topo, n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+            res.append(BenchmarkRun2loop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n         return res\n \n     def get_PS1PS2_3loop(self):\n@@ -535,7 +582,7 @@ class Benchmark(list):\n \n ]\n         for topo in PS1PS2_3loop:\n-            res.append(BenchmarkRun3loop(topo, n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+            res.append(BenchmarkRun3loop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n         return res\n \n     def get_PS1PS2_4loop(self):\n@@ -555,7 +602,7 @@ class Benchmark(list):\n \n ]\n         for topo in PS1PS2_4loop:\n-            res.append(BenchmarkRunHighloop(topo, n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+            res.append(BenchmarkRunHighloop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n         return res\n \n \n@@ -574,7 +621,7 @@ class Benchmark(list):\n ]\n         for topo in PS3_1loop:\n             #res.append(BenchmarkRun1loop(topo, samples=50*Units.M))\n-            res.append(BenchmarkRun2loop(topo, n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+            res.append(BenchmarkRun2loop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n         return res\n \n     def get_PS3_2loop(self):\n@@ -604,7 +651,7 @@ class Benchmark(list):\n '2L_8P_PS3_massive',\n ]\n         for topo in PS3_2loop:\n-            res.append(BenchmarkRun2loop(topo, n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+            res.append(BenchmarkRun2loop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n         return res\n \n     def get_PS3_3loop(self):\n@@ -620,7 +667,7 @@ class Benchmark(list):\n \n ]\n         for topo in PS3_3loop:\n-            res.append(BenchmarkRun3loop(topo, n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+            res.append(BenchmarkRun3loop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n         return res\n \n     def get_PS3_4loop(self):\n@@ -640,7 +687,7 @@ class Benchmark(list):\n \n ]\n         for topo in PS3_4loop:\n-            res.append(BenchmarkRunHighloop(topo, n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+            res.append(BenchmarkRunHighloop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n         return res\n \n def get_history(history_path):\ndiff --git a/submission_template.run b/submission_template.run\nindex c871b1c..0142515 100644\n--- a/submission_template.run\n+++ b/submission_template.run\n@@ -11,6 +11,7 @@\n #SBATCH --output=%(output)s\n #SBATCH --error=%(error)s\n #SBATCH --mail-type=start,end,fail\n+#SBATCH --account=%(account)s\n \n echo $SLURM_CPUS_PER_TASK",
        "samples": [
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "Pentagon_1s",
                "result": [
                    -3.4431700154415162e-12,
                    -2.565053394179856e-12
                ],
                "error": [
                    4.4902132952434725e-16,
                    4.56135445966839e-16
                ],
                "analytical_result": [
                    -3.44342331910881e-12,
                    -2.56487078110481e-12
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "Pentagon_2s",
                "result": [
                    -8.388825010479564e-13,
                    -1.7132470601092123e-12
                ],
                "error": [
                    1.612133450369737e-16,
                    1.6855281188294662e-16
                ],
                "analytical_result": [
                    -8.390484525815771e-13,
                    -1.713405042180853e-12
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "Pentagon_3s",
                "result": [
                    -3.4904381637898847e-12,
                    -3.89965258093251e-12
                ],
                "error": [
                    5.353942483469516e-16,
                    5.359465978210642e-16
                ],
                "analytical_result": [
                    -3.48997234169132e-12,
                    -3.90012989047481e-12
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "Hexagon_1s",
                "result": [
                    3.0459404164059255e-15,
                    -1.176905529422933e-13
                ],
                "error": [
                    5.761429838674876e-18,
                    7.584395335157175e-18
                ],
                "analytical_result": [
                    3.039790437605862e-15,
                    -1.1768253326142644e-13
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "Hexagon_2s",
                "result": [
                    1.3695046081982534e-15,
                    -2.2595663395225988e-15
                ],
                "error": [
                    5.165591008153737e-19,
                    5.292001288671944e-19
                ],
                "analytical_result": [
                    1.3691802654305414e-15,
                    -2.259008667111004e-15
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "Hexagon_3s",
                "result": [
                    1.29802348528159e-15,
                    -2.165552810771118e-15
                ],
                "error": [
                    3.776107413553063e-19,
                    3.683029392577343e-19
                ],
                "analytical_result": [
                    1.297703695865679e-15,
                    -2.1658951065401658e-15
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "Hexagon_4s",
                "result": [
                    8.039068476989219e-17,
                    -1.1527770760076977e-14
                ],
                "error": [
                    1.400112440749682e-18,
                    1.403708853282829e-18
                ],
                "analytical_result": [
                    7.939620566544445e-17,
                    -1.1528177654174178e-14
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "Pentagon_10E_1s",
                "result": [
                    -3.648738841393581e-17,
                    5.971434574394943e-13
                ],
                "error": [
                    2.881865344981224e-17,
                    2.852554192663612e-17
                ],
                "analytical_result": [
                    -0.0,
                    5.971433616274931e-13
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "Pentagon_6E_4s",
                "result": [
                    9.003594214070809e-11,
                    4.1782263010804555e-10
                ],
                "error": [
                    7.630548268661427e-14,
                    7.96620616634858e-14
                ],
                "analytical_result": [
                    8.992e-11,
                    4.17837e-10
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "Pentagon_8E_5s",
                "result": [
                    4.227202979003788e-15,
                    -2.1811791970266174e-13
                ],
                "error": [
                    6.813279461202855e-17,
                    6.817029424991936e-17
                ],
                "analytical_result": [
                    4.118696992009977e-15,
                    -2.1805718929649134e-13
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "Hexagon_6E_4s",
                "result": [
                    -2.7225460843242854e-15,
                    -1.208949917859869e-14
                ],
                "error": [
                    1.0274680221493516e-18,
                    1.116904851260761e-18
                ],
                "analytical_result": [
                    -2.7216841734816e-15,
                    -1.2089609024538e-14
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "Hexagon_10E_4s",
                "result": [
                    -3.0197644507437884e-17,
                    -7.732804707163594e-17
                ],
                "error": [
                    4.044272171259297e-21,
                    4.736867099970893e-21
                ],
                "analytical_result": [
                    -3.0193937848736e-17,
                    -7.73337287748906e-17
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "Hexagon_9E_4s",
                "result": [
                    2.837766457510082e-17,
                    8.314395986921957e-18
                ],
                "error": [
                    4.036432755422328e-21,
                    4.036460879602536e-21
                ],
                "analytical_result": [
                    2.83771892273698e-17,
                    8.3141576190839e-18
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "Hexagon_10E_7s",
                "result": [
                    0.021348715457873483,
                    0.006576971196002383
                ],
                "error": [
                    0.0003229996966132615,
                    0.0003145215284538745
                ],
                "analytical_result": [
                    0.0211928148966,
                    0.0064030325864
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "Hexagon_10E_5s",
                "result": [
                    -2.815831183774937,
                    2.473079448847676
                ],
                "error": [
                    0.0005955666397077435,
                    0.0006109643636314382
                ],
                "analytical_result": [
                    -2.81475384,
                    2.4732705
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "Hexagon_6E_2s",
                "result": [
                    -20.739175334430474,
                    4.259325091265933
                ],
                "error": [
                    0.018849099955038896,
                    0.016116058066932573
                ],
                "analytical_result": [
                    -20.7013988797142,
                    4.234325146404
                ]
            }
        ]
    }
}