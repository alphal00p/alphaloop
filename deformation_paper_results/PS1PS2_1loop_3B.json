{
    "1574878352.626326": {
        "hyperparameters": {
            "Deformation": {
                "additive": {
                    "a_ij": 0.01,
                    "a_ijs": [],
                    "mode": "exponential"
                },
                "fixed": {
                    "M_ij": 1.0,
                    "a_ijs": [],
                    "delta": 0.3,
                    "include_normal_source": false,
                    "local": false,
                    "m_ijs": [],
                    "mode": "hyperbolic",
                    "normalisation_of_subspace_components": true,
                    "normalisation_per_number_of_sources": true,
                    "normalize_per_source": false,
                    "sigma": 0.0,
                    "source_dampening_factor": -0.0005
                },
                "lambdas": [],
                "max_iterations": 1,
                "normalize_on_E_surfaces_m": -1.0,
                "overall_scaling": "constant",
                "overall_scaling_constant": 1.0,
                "scaling": {
                    "branch_cut_m": -1.0,
                    "cut_propagator_check": false,
                    "expansion_check": true,
                    "expansion_check_strategy": "ratio",
                    "expansion_threshold": -0.3,
                    "lambda": 10.0,
                    "non_cut_propagator_check": true,
                    "pole_check_strategy": "real_solution",
                    "positive_cut_check": true,
                    "skip_hyperboloids": true,
                    "softmin_sigma": 0.0,
                    "source_branch_cut_m": -1.0,
                    "source_branch_cut_multiplier": 0.8,
                    "source_branch_cut_threshold": 0.8,
                    "theta_c": 2.0,
                    "theta_r_in": 2.0,
                    "theta_r_out": 2.0
                },
                "stability_threshold": -1
            },
            "General": {
                "absolute_precision": 1e+99,
                "amplitude": "",
                "cut_filter": [],
                "debug": 0,
                "deformation_strategy": "fixed",
                "integration_statistics": false,
                "log_file_prefix": "stats/statistics",
                "log_points_to_screen": false,
                "log_stats_to_screen": false,
                "minimal_precision_for_returning_result": 2.0,
                "mu_uv_sq_re_im": [
                    10000.0,
                    0
                ],
                "multi_channeling": false,
                "multi_channeling_channel": null,
                "num_digits_different_for_inconsistency": 10.0,
                "numerical_instability_check": true,
                "numerical_threshold": 0.0,
                "python_numerator": null,
                "relative_precision": 3.0,
                "res_file_prefix": "",
                "screen_log_core": 1,
                "statistics_interval": 100000,
                "topology": "Box",
                "unstable_point_warning_percentage": 1.0,
                "use_collinear_ct": false,
                "use_ct": false
            },
            "Integrator": {
                "border": 0.001,
                "eps_abs": 0.0,
                "eps_rel": 1e-08,
                "flatness": 50.0,
                "integrated_phase": "both",
                "integrator": "vegas",
                "keep_state_file": false,
                "max_pass": 5,
                "maxchisq": 0.0,
                "mindeviation": 0.025,
                "n_increase": 100000,
                "n_max": 10000000000,
                "n_min": 2,
                "n_new": 100000,
                "n_start": 100000,
                "n_vec": 1,
                "refine_n_points": 0,
                "refine_n_runs": 0,
                "reset_vegas_integrator": true,
                "seed": 1,
                "state_filename_prefix": null,
                "survey_n_iterations": 0,
                "survey_n_points": 0,
                "use_only_last_sample": false
            },
            "Parameterization": {
                "b": 1.0,
                "input_rescaling": [
                    [
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ]
                    ],
                    [
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ]
                    ],
                    [
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ]
                    ],
                    [
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ]
                    ],
                    [
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ]
                    ],
                    [
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ]
                    ]
                ],
                "mapping": "linear",
                "mode": "spherical",
                "shifts": [
                    [
                        1.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        1.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        1.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        1.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        1.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        1.0,
                        0.0,
                        0.0,
                        0.0
                    ]
                ]
            }
        },
        "diff": "diff --git a/LTD/ltd_commons.py b/LTD/ltd_commons.py\nindex 328aa81..ae096ac 100755\n--- a/LTD/ltd_commons.py\n+++ b/LTD/ltd_commons.py\n@@ -135,9 +135,9 @@ hyperparameters = HyperParameters({\n             'source_branch_cut_multiplier' : 0.8,\n             # the strategy can be real_solution (the old method), exact (for 1 loop), and tangent_check\n             'pole_check_strategy'       : 'real_solution',\n-            'theta_r_out'               : 10.,\n-            'theta_r_in'                : 10.,\n-            'theta_c'                   : 10.,\n+            'theta_r_out'               : 2.,\n+            'theta_r_in'                : 2.,\n+            'theta_c'                   : 2.,\n         },\n \n         'additive'              :   {\ndiff --git a/benchmark.py b/benchmark.py\nindex 2e54734..42421f8 100755\n--- a/benchmark.py\n+++ b/benchmark.py\n@@ -3,7 +3,6 @@ import subprocess\n from tabulate import tabulate\n from uncertainties import ufloat\n import time\n-import yaml\n import json\n from tqdm import tqdm\n import os\n@@ -16,8 +15,18 @@ import time\n from pprint import pprint, pformat\n from datetime import datetime\n \n+import yaml\n+from yaml import Loader, Dumper\n+\n file_path = os.path.dirname(os.path.realpath( __file__ ))\n pjoin = os.path.join\n+root_path = os.path.dirname(os.path.realpath( __file__ ))\n+sys.path.insert(0, root_path)\n+sys.path.insert(0, pjoin(root_path,'LTD'))\n+\n+import ltd_commons\n+import ltd_utils\n+from ltd_utils import Colour\n \n W  = '\\033[0m'  # white (normal)\n R  = '\\033[31m' # red\n@@ -40,6 +49,11 @@ _RUN_DIR = pjoin(file_path,'run_dir')\n _WALL_TIME = 24\n _ACCOUNT = 'eth5e'\n \n+_FULL_DETAILS = False\n+\n+loaded_topologies = ltd_utils.TopologyCollection.import_from(os.path.join(root_path, 'LTD','topologies.yaml'))\n+ \n+\n class Units:\n     K = 1000\n     M = 1000*K\n@@ -66,27 +80,29 @@ class BenchmarkRun(dict):\n     def get_rust_result(cls,topology, phase, num_samples, cores, integrator, ltd_extra_args=None, collect_only=False):\n \n         # Check if there exists a yaml specification file for that topology\n-        topology_resource = pjoin(file_path,\"LTD\",\"topologies.yaml\")\n         if os.path.isfile(pjoin(file_path,\"LTD\",\"topologies\",\"%s.yaml\"%topology)):\n             topology_resource = pjoin(file_path,\"LTD\",\"topologies\",\"%s.yaml\"%topology)\n-    \n+            new_topologies = ltd_utils.TopologyCollection.import_from(topology_resource)\n+            for topo_name, topo in new_topologies.items():\n+                loaded_topologies[topo_name] = topo\n+        else:\n+            topology_resource = pjoin(file_path,\"LTD\",\"topologies.yaml\")\n+\n         # get analytical result\n         analytical_result = (0.,0.)\n         n_loops = 0\n-        with open(topology_resource, 'r') as f:\n-            topologies = yaml.safe_load(f)\n-            try:\n-                for t in topologies:\n-                    if t['name'] == topology:\n-                        analytical_result = (t['analytical_result_real'], t['analytical_result_imag'])\n-                        n_loops = t['n_loops'] \n-            except:\n-                print(\"Could not extract analytic result and/or load information for topology: %s\"%topology)\n-                sys.exit(1)\n-    \n+        if topology not in loaded_topologies:\n+            print(\"Could not extract analytic result and/or load information for topology: %s\"%topology)\n+            sys.exit(1)\n+        analytical_result = (\n+          loaded_topologies[topology].analytic_result.real if loaded_topologies[topology].analytic_result else 0.,\n+          loaded_topologies[topology].analytic_result.imag if loaded_topologies[topology].analytic_result else 0.\n+        )\n+        n_loops = loaded_topologies[topology].n_loops\n+\n         no_analytical_found = False\n         if analytical_result[0]==analytical_result[1]==0.:\n-            print(\"WARNING: Topology '%s' does not exist or does not specify an analytical result. The benchmark tool is meant to be used for topologies with a target result, so we will set the analytical result equal to the one obtained by RUST.\"%topology)\n+            #print(\"WARNING: Topology '%s' does not exist or does not specify an analytical result. The benchmark tool is meant to be used for topologies with a target result, so we will set the analytical result equal to the one obtained by RUST.\"%topology)\n             no_analytical_found = True\n         \n         #cargo_options = [\"cargo\",\"run\", \"--release\", \"--bin\", \"ltd\"]\n@@ -648,7 +664,7 @@ class Benchmark(list):\n '2L_6P_F_PS3',\n '2L_6P_F_PS3_massive',\n '2L_8P_PS3',\n-'2L_8P_PS3_massive',\n+#'2L_8P_PS3_massive',\n ]\n         for topo in PS3_2loop:\n             res.append(BenchmarkRun2loop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n@@ -742,6 +758,103 @@ def get_score_for_sample(sample, number_of_samples):\n \n     return scores\n \n+def add_meta_data_to_sample(sample):\n+    \"\"\" Add information like number of sources, time per point etc.. to sample. \"\"\"\n+\n+    topo_name = sample['topology']\n+    if topo_name not in loaded_topologies:\n+        # Check if there exists a yaml specification file for that topology\n+        if os.path.isfile(pjoin(file_path,\"LTD\",\"topologies\",\"%s.yaml\"%topo_name)):\n+            topology_resource = pjoin(file_path,\"LTD\",\"topologies\",\"%s.yaml\"%topo_name)\n+            new_topologies = ltd_utils.TopologyCollection.import_from(topology_resource)\n+            for a_topo_name, topo in new_topologies.items():\n+                loaded_topologies[a_topo_name] = topo\n+\n+    if topo_name not in loaded_topologies:\n+        return\n+\n+    topo = loaded_topologies[topo_name]\n+    maximal_overlap = [ source['overlap'] for source in topo.fixed_deformation[0]['deformation_per_overlap'] ]\n+    E_surfaces = set(sum(maximal_overlap, []))\n+    n_sources = 0\n+    max_radius = None\n+    min_radius = None\n+    for space in topo.fixed_deformation:\n+        for source in space['deformation_per_overlap']:\n+            n_sources += 1\n+            if max_radius is None or max_radius<source['radius']:\n+                max_radius=source['radius']\n+            if min_radius is None or min_radius>source['radius']:\n+                min_radius=source['radius']\n+    if max_radius is None:\n+        max_radius = 0.\n+    if min_radius is None:\n+        min_radius = 0.\n+\n+    n_propagators_per_loop_line = [len(ll.propagators) for ll in topo.loop_lines]\n+    n_channels = 0\n+    for cs in topo.ltd_cut_structure:\n+        n_channels_for_this_cut = 1\n+        for i_ll, cut_sign in enumerate(cs):\n+            if cut_sign != 0:\n+                n_channels_for_this_cut *= n_propagators_per_loop_line[i_ll]\n+        n_channels += n_channels_for_this_cut\n+    n_cuts = n_channels\n+\n+    if topo.n_loops == 1:\n+        timing_stats = 50000\n+    elif topo.n_loops == 2:\n+        timing_stats = 5000\n+    elif topo.n_loops == 3:\n+        timing_stats = 500\n+    else:\n+        timing_stats = 500\n+\n+    if os.path.isfile(pjoin(file_path,\"LTD\",\"topologies\",\"%s.yaml\"%topo_name)):\n+        topology_file = pjoin(file_path,\"LTD\",\"topologies\",\"%s.yaml\"%topo_name)\n+    else:\n+        topology_file = pjoin(file_path,\"LTD\", \"topologies.yaml\")\n+    cmd = [\n+        pjoin(file_path,'rust_backend','target','release','ltd'),\n+        '-s',str(timing_stats),        \n+        '-t',topo_name,\n+        '-c','1',\n+        '-l', topology_file,        \n+        '-p', pjoin(file_path,'LTD','amplitudes.yaml'),\n+        '-f', pjoin(file_path,'LTD','hyperparameters.yaml'),\n+        'bench'\n+    ]\n+    \n+    timing = None\n+    previous_timing = None\n+    n_iter = 0\n+    while (timing is None) or (previous_timing is None) or (abs(previous_timing-timing)/timing > 0.2):\n+        n_iter += 1\n+        previous_timing = timing\n+        cmd[2] = str(timing_stats)\n+        raw_output = subprocess.check_output(cmd)\n+        timing = float(eval(raw_output.decode().replace('ms','*1.0e-3').replace('s','*1.0')))/float(timing_stats)\n+        if n_iter >= 5:\n+            print(\"WARNING: Could not get a stable timing estimate for topology %s, even with stats=%d. best estimate so far: %.3e\"%(\n+                topo_name, timing_stats, timing\n+            ))\n+            break\n+        timing_stats *= 2     \n+\n+\n+    # Now add the information collected to the sample\n+    sample['n_unique_existing_E_surface'] = len(E_surfaces)    \n+    sample['n_sources'] = n_sources\n+    sample['maximal_overlap'] = maximal_overlap\n+    sample['max_radius'] = max_radius\n+    sample['min_radius'] = min_radius\n+    sample['min_radius'] = min_radius\n+    sample['n_cuts'] = n_cuts\n+    sample['t_per_ps_point_in_s'] = timing\n+    \n+    #pprint(sample)\n+    return\n+\n def render_data(samples, number_of_samples, sort=False):\n     \"\"\" Render the data in a table. \"\"\"\n     data = []\n@@ -760,13 +873,16 @@ def render_data(samples, number_of_samples, sort=False):\n \n     for sample in samples:\n         score = get_score_for_sample(sample, number_of_samples)\n+        \n+        # Augment information in sample\n+        if _FULL_DETAILS:\n+            add_meta_data_to_sample(sample)\n \n         for i_phase, (phase,phase_name) in enumerate( [('real', 'Real'), ('imag', 'Imag')]):\n             if sample['result'][i_phase] is None:\n                 continue\n \n             (accuracy, precision, percentage) = score[phase]['accuracy'], score[phase]['precision'], score[phase]['percentage']\n-            \n             data.append(\n                 [sample['topology'] + ' ' + phase_name, \"{:,}\".format(int(sample['num_samples'])),\n                     ufloat(sample['result'][i_phase], sample['error'][i_phase]), \n@@ -776,14 +892,27 @@ def render_data(samples, number_of_samples, sort=False):\n                     (R + '%.2g'%percentage + W if percentage > 1.0 else G + '%.2g'%percentage + W) if percentage is not None else 'N/A',\n                     sample['revision'], sample['diff']]\n             )\n-   \n-    print(tabulate(data, ['Topology', '# Samples', 'Result', 'Reference', 'Accuracy', 'Precision', 'Percentage', 'Tag', 'Clean'], tablefmt=_TABLE_FORMAT))\n+            if _FULL_DETAILS:\n+                data[-1].extend([\n+                    sample['n_cuts'],                    \n+                    sample['n_unique_existing_E_surface'],    \n+                    sample['n_sources'],\n+                    str([len(ov) for ov in sample['maximal_overlap']]),\n+                    sample['min_radius'],                    \n+                    sample['max_radius'],\n+                    '%.4g'%(sample['t_per_ps_point_in_s']*1.0e6)\n+                ])\n+    header=['Topology', '# Samples', 'Result', 'Reference', 'Accuracy', 'Precision', 'Percentage', 'Tag', 'Clean']\n+    if _FULL_DETAILS:\n+        header.extend(['# cuts','# E-surfaces','# sources', 'Maximum overlap','Min. radius','Max. radius',' t/p [mus]'])\n+    print(tabulate(data, header, tablefmt=_TABLE_FORMAT))\n \n \n if __name__ == \"__main__\":\n     parser = argparse.ArgumentParser(description='Tool for benchmarking hyperparameters')\n     parser.add_argument('-t', metavar='topologies', type=str, nargs='+', help='topologies to test', required=False)\n     parser.add_argument('--from_history', action='store_true', help='Read the topology data from the history')\n+    parser.add_argument('--full_details', action='store_true', help='Render and include in the json file the complete details of the topology')    \n     parser.add_argument('-s', default='100000', type=int, help='number of samples')\n     parser.add_argument('-c', default='4', help='number of cores')\n     parser.add_argument('--wall_time', default='24', type=int, help='Set wall time')\n@@ -815,6 +944,7 @@ if __name__ == \"__main__\":\n     _CONFIG_FILE_PATH = args.config_path\n     _RUN_DIR = pjoin(file_path,args.run_dir)\n     _ACCOUNT = args.account\n+    _FULL_DETAILS = args.full_details\n \n     if args.clean:\n         print(\"Cleaning up directory %s.\"%_RUN_DIR)\n@@ -884,13 +1014,11 @@ if __name__ == \"__main__\":\n                         'overall_scaling_constant': dh['overall_scaling_constant'],\n                         'scaling': {\n                             'branch_cut_m':  dh['scaling']['branch_cut_m'],\n-                            'cut_propagator_check': dh['scaling']['cut_propagator_check'],\n-                            'expansion_check': dh['scaling']['expansion_check'],\n                             'expansion_check_strategy': dh['scaling']['expansion_check_strategy'],\n                             'expansion_threshold': dh['scaling']['expansion_threshold'],\n                             'lambda': dh['scaling']['lambda'],\n-                            'non_cut_propagator_check':dh['scaling']['non_cut_propagator_check'],\n-                            'positive_cut_check': dh['scaling']['positive_cut_check'],\n+                            'pole_check_strategy':dh['scaling']['pole_check_strategy'],\n+                            'branch_cut_check': dh['scaling']['branch_cut_check'],\n                             'source_branch_cut_m': dh['scaling']['source_branch_cut_m'],\n                             'source_branch_cut_multiplier': dh['scaling']['source_branch_cut_multiplier'],\n                             'source_branch_cut_threshold': dh['scaling']['source_branch_cut_threshold'],\n@@ -925,7 +1053,7 @@ if __name__ == \"__main__\":\n                 '-t %s '%(' '.join(args.t)) if args.t else '',\n                 '-b %s '%args.b if args.b!='manual' else ''\n             )) \n-            render_data(samples, args.s, sort=True)\n+            render_data(samples, args.s, sort=False)\n \n     # ask to save data\n     if not args.from_history and args.save:\ndiff --git a/deformation_paper_results/explore_1loop_3B.json b/deformation_paper_results/explore_1loop_3B.json\nindex 2dce849..1c75cf4 100644\n--- a/deformation_paper_results/explore_1loop_3B.json\n+++ b/deformation_paper_results/explore_1loop_3B.json\n@@ -1,4 +1,1064 @@\n {\n+    \"1574875702.791861\": {\n+        \"hyperparameters\": {\n+            \"Deformation\": {\n+                \"additive\": {\n+                    \"a_ij\": 0.01,\n+                    \"a_ijs\": [],\n+                    \"mode\": \"exponential\"\n+                },\n+                \"fixed\": {\n+                    \"M_ij\": 1.0,\n+                    \"a_ijs\": [],\n+                    \"delta\": 0.3,\n+                    \"include_normal_source\": false,\n+                    \"local\": false,\n+                    \"m_ijs\": [],\n+                    \"mode\": \"hyperbolic\",\n+                    \"normalisation_of_subspace_components\": true,\n+                    \"normalisation_per_number_of_sources\": true,\n+                    \"normalize_per_source\": false,\n+                    \"sigma\": 0.0,\n+                    \"source_dampening_factor\": -0.0005\n+                },\n+                \"lambdas\": [],\n+                \"max_iterations\": 1,\n+                \"normalize_on_E_surfaces_m\": -1.0,\n+                \"overall_scaling\": \"constant\",\n+                \"overall_scaling_constant\": 1.0,\n+                \"scaling\": {\n+                    \"branch_cut_m\": -1.0,\n+                    \"cut_propagator_check\": false,\n+                    \"expansion_check\": true,\n+                    \"expansion_check_strategy\": \"ratio\",\n+                    \"expansion_threshold\": -0.3,\n+                    \"lambda\": 10.0,\n+                    \"non_cut_propagator_check\": true,\n+                    \"pole_check_strategy\": \"real_solution\",\n+                    \"positive_cut_check\": true,\n+                    \"skip_hyperboloids\": true,\n+                    \"softmin_sigma\": 0.0,\n+                    \"source_branch_cut_m\": -1.0,\n+                    \"source_branch_cut_multiplier\": 0.8,\n+                    \"source_branch_cut_threshold\": 0.8,\n+                    \"theta_c\": 2.0,\n+                    \"theta_r_in\": 2.0,\n+                    \"theta_r_out\": 2.0\n+                },\n+                \"stability_threshold\": -1\n+            },\n+            \"General\": {\n+                \"absolute_precision\": 1e+99,\n+                \"amplitude\": \"\",\n+                \"cut_filter\": [],\n+                \"debug\": 0,\n+                \"deformation_strategy\": \"fixed\",\n+                \"integration_statistics\": false,\n+                \"log_file_prefix\": \"stats/statistics\",\n+                \"log_points_to_screen\": false,\n+                \"log_stats_to_screen\": false,\n+                \"minimal_precision_for_returning_result\": 2.0,\n+                \"mu_uv_sq_re_im\": [\n+                    10000.0,\n+                    0\n+                ],\n+                \"multi_channeling\": false,\n+                \"multi_channeling_channel\": null,\n+                \"num_digits_different_for_inconsistency\": 10.0,\n+                \"numerical_instability_check\": true,\n+                \"numerical_threshold\": 0.0,\n+                \"python_numerator\": null,\n+                \"relative_precision\": 3.0,\n+                \"res_file_prefix\": \"\",\n+                \"screen_log_core\": 1,\n+                \"statistics_interval\": 100000,\n+                \"topology\": \"Box\",\n+                \"unstable_point_warning_percentage\": 1.0,\n+                \"use_collinear_ct\": false,\n+                \"use_ct\": false\n+            },\n+            \"Integrator\": {\n+                \"border\": 0.001,\n+                \"eps_abs\": 0.0,\n+                \"eps_rel\": 1e-08,\n+                \"flatness\": 50.0,\n+                \"integrated_phase\": \"both\",\n+                \"integrator\": \"vegas\",\n+                \"keep_state_file\": false,\n+                \"max_pass\": 5,\n+                \"maxchisq\": 0.0,\n+                \"mindeviation\": 0.025,\n+                \"n_increase\": 100000,\n+                \"n_max\": 10000000000,\n+                \"n_min\": 2,\n+                \"n_new\": 100000,\n+                \"n_start\": 100000,\n+                \"n_vec\": 1,\n+                \"refine_n_points\": 0,\n+                \"refine_n_runs\": 0,\n+                \"reset_vegas_integrator\": true,\n+                \"seed\": 1,\n+                \"state_filename_prefix\": null,\n+                \"survey_n_iterations\": 0,\n+                \"survey_n_points\": 0,\n+                \"use_only_last_sample\": false\n+            },\n+            \"Parameterization\": {\n+                \"b\": 1.0,\n+                \"input_rescaling\": [\n+                    [\n+                        [\n+                            0.0,\n+                            1.0\n+                        ],\n+                        [\n+                            0.0,\n+                            1.0\n+                        ],\n+                        [\n+                            0.0,\n+                            1.0\n+                        ]\n+                    ],\n+                    [\n+                        [\n+                            0.0,\n+                            1.0\n+                        ],\n+                        [\n+                            0.0,\n+                            1.0\n+                        ],\n+                        [\n+                            0.0,\n+                            1.0\n+                        ]\n+                    ],\n+                    [\n+                        [\n+                            0.0,\n+                            1.0\n+                        ],\n+                        [\n+                            0.0,\n+                            1.0\n+                        ],\n+                        [\n+                            0.0,\n+                            1.0\n+                        ]\n+                    ],\n+                    [\n+                        [\n+                            0.0,\n+                            1.0\n+                        ],\n+                        [\n+                            0.0,\n+                            1.0\n+                        ],\n+                        [\n+                            0.0,\n+                            1.0\n+                        ]\n+                    ],\n+                    [\n+                        [\n+                            0.0,\n+                            1.0\n+                        ],\n+                        [\n+                            0.0,\n+                            1.0\n+                        ],\n+                        [\n+                            0.0,\n+                            1.0\n+                        ]\n+                    ],\n+                    [\n+                        [\n+                            0.0,\n+                            1.0\n+                        ],\n+                        [\n+                            0.0,\n+                            1.0\n+                        ],\n+                        [\n+                            0.0,\n+                            1.0\n+                        ]\n+                    ]\n+                ],\n+                \"mapping\": \"linear\",\n+                \"mode\": \"spherical\",\n+                \"shifts\": [\n+                    [\n+                        1.0,\n+                        0.0,\n+                        0.0,\n+                        0.0\n+                    ],\n+                    [\n+                        1.0,\n+                        0.0,\n+                        0.0,\n+                        0.0\n+                    ],\n+                    [\n+                        1.0,\n+                        0.0,\n+                        0.0,\n+                        0.0\n+                    ],\n+                    [\n+                        1.0,\n+                        0.0,\n+                        0.0,\n+                        0.0\n+                    ],\n+                    [\n+                        1.0,\n+                        0.0,\n+                        0.0,\n+                        0.0\n+                    ],\n+                    [\n+                        1.0,\n+                        0.0,\n+                        0.0,\n+                        0.0\n+                    ]\n+                ]\n+            }\n+        },\n+        \"diff\": \"diff --git a/LTD/ltd_commons.py b/LTD/ltd_commons.py\\nindex 328aa81..ae096ac 100755\\n--- a/LTD/ltd_commons.py\\n+++ b/LTD/ltd_commons.py\\n@@ -135,9 +135,9 @@ hyperparameters = HyperParameters({\\n             'source_branch_cut_multiplier' : 0.8,\\n             # the strategy can be real_solution (the old method), exact (for 1 loop), and tangent_check\\n             'pole_check_strategy'       : 'real_solution',\\n-            'theta_r_out'               : 10.,\\n-            'theta_r_in'                : 10.,\\n-            'theta_c'                   : 10.,\\n+            'theta_r_out'               : 2.,\\n+            'theta_r_in'                : 2.,\\n+            'theta_c'                   : 2.,\\n         },\\n \\n         'additive'              :   {\\ndiff --git a/benchmark.py b/benchmark.py\\nindex 2e54734..42421f8 100755\\n--- a/benchmark.py\\n+++ b/benchmark.py\\n@@ -3,7 +3,6 @@ import subprocess\\n from tabulate import tabulate\\n from uncertainties import ufloat\\n import time\\n-import yaml\\n import json\\n from tqdm import tqdm\\n import os\\n@@ -16,8 +15,18 @@ import time\\n from pprint import pprint, pformat\\n from datetime import datetime\\n \\n+import yaml\\n+from yaml import Loader, Dumper\\n+\\n file_path = os.path.dirname(os.path.realpath( __file__ ))\\n pjoin = os.path.join\\n+root_path = os.path.dirname(os.path.realpath( __file__ ))\\n+sys.path.insert(0, root_path)\\n+sys.path.insert(0, pjoin(root_path,'LTD'))\\n+\\n+import ltd_commons\\n+import ltd_utils\\n+from ltd_utils import Colour\\n \\n W  = '\\\\033[0m'  # white (normal)\\n R  = '\\\\033[31m' # red\\n@@ -40,6 +49,11 @@ _RUN_DIR = pjoin(file_path,'run_dir')\\n _WALL_TIME = 24\\n _ACCOUNT = 'eth5e'\\n \\n+_FULL_DETAILS = False\\n+\\n+loaded_topologies = ltd_utils.TopologyCollection.import_from(os.path.join(root_path, 'LTD','topologies.yaml'))\\n+ \\n+\\n class Units:\\n     K = 1000\\n     M = 1000*K\\n@@ -66,27 +80,29 @@ class BenchmarkRun(dict):\\n     def get_rust_result(cls,topology, phase, num_samples, cores, integrator, ltd_extra_args=None, collect_only=False):\\n \\n         # Check if there exists a yaml specification file for that topology\\n-        topology_resource = pjoin(file_path,\\\"LTD\\\",\\\"topologies.yaml\\\")\\n         if os.path.isfile(pjoin(file_path,\\\"LTD\\\",\\\"topologies\\\",\\\"%s.yaml\\\"%topology)):\\n             topology_resource = pjoin(file_path,\\\"LTD\\\",\\\"topologies\\\",\\\"%s.yaml\\\"%topology)\\n-    \\n+            new_topologies = ltd_utils.TopologyCollection.import_from(topology_resource)\\n+            for topo_name, topo in new_topologies.items():\\n+                loaded_topologies[topo_name] = topo\\n+        else:\\n+            topology_resource = pjoin(file_path,\\\"LTD\\\",\\\"topologies.yaml\\\")\\n+\\n         # get analytical result\\n         analytical_result = (0.,0.)\\n         n_loops = 0\\n-        with open(topology_resource, 'r') as f:\\n-            topologies = yaml.safe_load(f)\\n-            try:\\n-                for t in topologies:\\n-                    if t['name'] == topology:\\n-                        analytical_result = (t['analytical_result_real'], t['analytical_result_imag'])\\n-                        n_loops = t['n_loops'] \\n-            except:\\n-                print(\\\"Could not extract analytic result and/or load information for topology: %s\\\"%topology)\\n-                sys.exit(1)\\n-    \\n+        if topology not in loaded_topologies:\\n+            print(\\\"Could not extract analytic result and/or load information for topology: %s\\\"%topology)\\n+            sys.exit(1)\\n+        analytical_result = (\\n+          loaded_topologies[topology].analytic_result.real if loaded_topologies[topology].analytic_result else 0.,\\n+          loaded_topologies[topology].analytic_result.imag if loaded_topologies[topology].analytic_result else 0.\\n+        )\\n+        n_loops = loaded_topologies[topology].n_loops\\n+\\n         no_analytical_found = False\\n         if analytical_result[0]==analytical_result[1]==0.:\\n-            print(\\\"WARNING: Topology '%s' does not exist or does not specify an analytical result. The benchmark tool is meant to be used for topologies with a target result, so we will set the analytical result equal to the one obtained by RUST.\\\"%topology)\\n+            #print(\\\"WARNING: Topology '%s' does not exist or does not specify an analytical result. The benchmark tool is meant to be used for topologies with a target result, so we will set the analytical result equal to the one obtained by RUST.\\\"%topology)\\n             no_analytical_found = True\\n         \\n         #cargo_options = [\\\"cargo\\\",\\\"run\\\", \\\"--release\\\", \\\"--bin\\\", \\\"ltd\\\"]\\n@@ -648,7 +664,7 @@ class Benchmark(list):\\n '2L_6P_F_PS3',\\n '2L_6P_F_PS3_massive',\\n '2L_8P_PS3',\\n-'2L_8P_PS3_massive',\\n+#'2L_8P_PS3_massive',\\n ]\\n         for topo in PS3_2loop:\\n             res.append(BenchmarkRun2loop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\\n@@ -742,6 +758,103 @@ def get_score_for_sample(sample, number_of_samples):\\n \\n     return scores\\n \\n+def add_meta_data_to_sample(sample):\\n+    \\\"\\\"\\\" Add information like number of sources, time per point etc.. to sample. \\\"\\\"\\\"\\n+\\n+    topo_name = sample['topology']\\n+    if topo_name not in loaded_topologies:\\n+        # Check if there exists a yaml specification file for that topology\\n+        if os.path.isfile(pjoin(file_path,\\\"LTD\\\",\\\"topologies\\\",\\\"%s.yaml\\\"%topo_name)):\\n+            topology_resource = pjoin(file_path,\\\"LTD\\\",\\\"topologies\\\",\\\"%s.yaml\\\"%topo_name)\\n+            new_topologies = ltd_utils.TopologyCollection.import_from(topology_resource)\\n+            for a_topo_name, topo in new_topologies.items():\\n+                loaded_topologies[a_topo_name] = topo\\n+\\n+    if topo_name not in loaded_topologies:\\n+        return\\n+\\n+    topo = loaded_topologies[topo_name]\\n+    maximal_overlap = [ source['overlap'] for source in topo.fixed_deformation[0]['deformation_per_overlap'] ]\\n+    E_surfaces = set(sum(maximal_overlap, []))\\n+    n_sources = 0\\n+    max_radius = None\\n+    min_radius = None\\n+    for space in topo.fixed_deformation:\\n+        for source in space['deformation_per_overlap']:\\n+            n_sources += 1\\n+            if max_radius is None or max_radius<source['radius']:\\n+                max_radius=source['radius']\\n+            if min_radius is None or min_radius>source['radius']:\\n+                min_radius=source['radius']\\n+    if max_radius is None:\\n+        max_radius = 0.\\n+    if min_radius is None:\\n+        min_radius = 0.\\n+\\n+    n_propagators_per_loop_line = [len(ll.propagators) for ll in topo.loop_lines]\\n+    n_channels = 0\\n+    for cs in topo.ltd_cut_structure:\\n+        n_channels_for_this_cut = 1\\n+        for i_ll, cut_sign in enumerate(cs):\\n+            if cut_sign != 0:\\n+                n_channels_for_this_cut *= n_propagators_per_loop_line[i_ll]\\n+        n_channels += n_channels_for_this_cut\\n+    n_cuts = n_channels\\n+\\n+    if topo.n_loops == 1:\\n+        timing_stats = 50000\\n+    elif topo.n_loops == 2:\\n+        timing_stats = 5000\\n+    elif topo.n_loops == 3:\\n+        timing_stats = 500\\n+    else:\\n+        timing_stats = 500\\n+\\n+    if os.path.isfile(pjoin(file_path,\\\"LTD\\\",\\\"topologies\\\",\\\"%s.yaml\\\"%topo_name)):\\n+        topology_file = pjoin(file_path,\\\"LTD\\\",\\\"topologies\\\",\\\"%s.yaml\\\"%topo_name)\\n+    else:\\n+        topology_file = pjoin(file_path,\\\"LTD\\\", \\\"topologies.yaml\\\")\\n+    cmd = [\\n+        pjoin(file_path,'rust_backend','target','release','ltd'),\\n+        '-s',str(timing_stats),        \\n+        '-t',topo_name,\\n+        '-c','1',\\n+        '-l', topology_file,        \\n+        '-p', pjoin(file_path,'LTD','amplitudes.yaml'),\\n+        '-f', pjoin(file_path,'LTD','hyperparameters.yaml'),\\n+        'bench'\\n+    ]\\n+    \\n+    timing = None\\n+    previous_timing = None\\n+    n_iter = 0\\n+    while (timing is None) or (previous_timing is None) or (abs(previous_timing-timing)/timing > 0.2):\\n+        n_iter += 1\\n+        previous_timing = timing\\n+        cmd[2] = str(timing_stats)\\n+        raw_output = subprocess.check_output(cmd)\\n+        timing = float(eval(raw_output.decode().replace('ms','*1.0e-3').replace('s','*1.0')))/float(timing_stats)\\n+        if n_iter >= 5:\\n+            print(\\\"WARNING: Could not get a stable timing estimate for topology %s, even with stats=%d. best estimate so far: %.3e\\\"%(\\n+                topo_name, timing_stats, timing\\n+            ))\\n+            break\\n+        timing_stats *= 2     \\n+\\n+\\n+    # Now add the information collected to the sample\\n+    sample['n_unique_existing_E_surface'] = len(E_surfaces)    \\n+    sample['n_sources'] = n_sources\\n+    sample['maximal_overlap'] = maximal_overlap\\n+    sample['max_radius'] = max_radius\\n+    sample['min_radius'] = min_radius\\n+    sample['min_radius'] = min_radius\\n+    sample['n_cuts'] = n_cuts\\n+    sample['t_per_ps_point_in_s'] = timing\\n+    \\n+    #pprint(sample)\\n+    return\\n+\\n def render_data(samples, number_of_samples, sort=False):\\n     \\\"\\\"\\\" Render the data in a table. \\\"\\\"\\\"\\n     data = []\\n@@ -760,13 +873,16 @@ def render_data(samples, number_of_samples, sort=False):\\n \\n     for sample in samples:\\n         score = get_score_for_sample(sample, number_of_samples)\\n+        \\n+        # Augment information in sample\\n+        if _FULL_DETAILS:\\n+            add_meta_data_to_sample(sample)\\n \\n         for i_phase, (phase,phase_name) in enumerate( [('real', 'Real'), ('imag', 'Imag')]):\\n             if sample['result'][i_phase] is None:\\n                 continue\\n \\n             (accuracy, precision, percentage) = score[phase]['accuracy'], score[phase]['precision'], score[phase]['percentage']\\n-            \\n             data.append(\\n                 [sample['topology'] + ' ' + phase_name, \\\"{:,}\\\".format(int(sample['num_samples'])),\\n                     ufloat(sample['result'][i_phase], sample['error'][i_phase]), \\n@@ -776,14 +892,27 @@ def render_data(samples, number_of_samples, sort=False):\\n                     (R + '%.2g'%percentage + W if percentage > 1.0 else G + '%.2g'%percentage + W) if percentage is not None else 'N/A',\\n                     sample['revision'], sample['diff']]\\n             )\\n-   \\n-    print(tabulate(data, ['Topology', '# Samples', 'Result', 'Reference', 'Accuracy', 'Precision', 'Percentage', 'Tag', 'Clean'], tablefmt=_TABLE_FORMAT))\\n+            if _FULL_DETAILS:\\n+                data[-1].extend([\\n+                    sample['n_cuts'],                    \\n+                    sample['n_unique_existing_E_surface'],    \\n+                    sample['n_sources'],\\n+                    str([len(ov) for ov in sample['maximal_overlap']]),\\n+                    sample['min_radius'],                    \\n+                    sample['max_radius'],\\n+                    '%.4g'%(sample['t_per_ps_point_in_s']*1.0e6)\\n+                ])\\n+    header=['Topology', '# Samples', 'Result', 'Reference', 'Accuracy', 'Precision', 'Percentage', 'Tag', 'Clean']\\n+    if _FULL_DETAILS:\\n+        header.extend(['# cuts','# E-surfaces','# sources', 'Maximum overlap','Min. radius','Max. radius',' t/p [mus]'])\\n+    print(tabulate(data, header, tablefmt=_TABLE_FORMAT))\\n \\n \\n if __name__ == \\\"__main__\\\":\\n     parser = argparse.ArgumentParser(description='Tool for benchmarking hyperparameters')\\n     parser.add_argument('-t', metavar='topologies', type=str, nargs='+', help='topologies to test', required=False)\\n     parser.add_argument('--from_history', action='store_true', help='Read the topology data from the history')\\n+    parser.add_argument('--full_details', action='store_true', help='Render and include in the json file the complete details of the topology')    \\n     parser.add_argument('-s', default='100000', type=int, help='number of samples')\\n     parser.add_argument('-c', default='4', help='number of cores')\\n     parser.add_argument('--wall_time', default='24', type=int, help='Set wall time')\\n@@ -815,6 +944,7 @@ if __name__ == \\\"__main__\\\":\\n     _CONFIG_FILE_PATH = args.config_path\\n     _RUN_DIR = pjoin(file_path,args.run_dir)\\n     _ACCOUNT = args.account\\n+    _FULL_DETAILS = args.full_details\\n \\n     if args.clean:\\n         print(\\\"Cleaning up directory %s.\\\"%_RUN_DIR)\\n@@ -884,13 +1014,11 @@ if __name__ == \\\"__main__\\\":\\n                         'overall_scaling_constant': dh['overall_scaling_constant'],\\n                         'scaling': {\\n                             'branch_cut_m':  dh['scaling']['branch_cut_m'],\\n-                            'cut_propagator_check': dh['scaling']['cut_propagator_check'],\\n-                            'expansion_check': dh['scaling']['expansion_check'],\\n                             'expansion_check_strategy': dh['scaling']['expansion_check_strategy'],\\n                             'expansion_threshold': dh['scaling']['expansion_threshold'],\\n                             'lambda': dh['scaling']['lambda'],\\n-                            'non_cut_propagator_check':dh['scaling']['non_cut_propagator_check'],\\n-                            'positive_cut_check': dh['scaling']['positive_cut_check'],\\n+                            'pole_check_strategy':dh['scaling']['pole_check_strategy'],\\n+                            'branch_cut_check': dh['scaling']['branch_cut_check'],\\n                             'source_branch_cut_m': dh['scaling']['source_branch_cut_m'],\\n                             'source_branch_cut_multiplier': dh['scaling']['source_branch_cut_multiplier'],\\n                             'source_branch_cut_threshold': dh['scaling']['source_branch_cut_threshold'],\\n@@ -925,7 +1053,7 @@ if __name__ == \\\"__main__\\\":\\n                 '-t %s '%(' '.join(args.t)) if args.t else '',\\n                 '-b %s '%args.b if args.b!='manual' else ''\\n             )) \\n-            render_data(samples, args.s, sort=True)\\n+            render_data(samples, args.s, sort=False)\\n \\n     # ask to save data\\n     if not args.from_history and args.save:\\ndiff --git a/submission_template.run b/submission_template.run\\nindex c871b1c..0142515 100644\\n--- a/submission_template.run\\n+++ b/submission_template.run\\n@@ -11,6 +11,7 @@\\n #SBATCH --output=%(output)s\\n #SBATCH --error=%(error)s\\n #SBATCH --mail-type=start,end,fail\\n+#SBATCH --account=%(account)s\\n \\n echo $SLURM_CPUS_PER_TASK\",\n+        \"samples\": [\n+            {\n+                \"revision\": \"e58c4b7\",\n+                \"diff\": false,\n+                \"num_samples\": 3000000000,\n+                \"topology\": \"Pentagon_1s\",\n+                \"result\": [\n+                    -3.4431700154415162e-12,\n+                    -2.565053394179856e-12\n+                ],\n+                \"error\": [\n+                    4.4902132952434725e-16,\n+                    4.56135445966839e-16\n+                ],\n+                \"analytical_result\": [\n+                    -3.44342331910881e-12,\n+                    -2.56487078110481e-12\n+                ],\n+                \"n_unique_existing_E_surface\": 8,\n+                \"n_sources\": 1,\n+                \"maximal_overlap\": [\n+                    [\n+                        0,\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        5,\n+                        6,\n+                        7\n+                    ]\n+                ],\n+                \"max_radius\": 0.46088619415160126,\n+                \"min_radius\": 0.46088619415160126,\n+                \"n_cuts\": 5,\n+                \"t_per_ps_point_in_s\": 1.535113466e-05\n+            },\n+            {\n+                \"revision\": \"e58c4b7\",\n+                \"diff\": false,\n+                \"num_samples\": 3000000000,\n+                \"topology\": \"Pentagon_2s\",\n+                \"result\": [\n+                    -8.388825010479564e-13,\n+                    -1.7132470601092123e-12\n+                ],\n+                \"error\": [\n+                    1.612133450369737e-16,\n+                    1.6855281188294662e-16\n+                ],\n+                \"analytical_result\": [\n+                    -8.390484525815771e-13,\n+                    -1.713405042180853e-12\n+                ],\n+                \"n_unique_existing_E_surface\": 8,\n+                \"n_sources\": 2,\n+                \"maximal_overlap\": [\n+                    [\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        5,\n+                        6,\n+                        7\n+                    ],\n+                    [\n+                        0,\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        6,\n+                        7\n+                    ]\n+                ],\n+                \"max_radius\": 1.8590919065967688,\n+                \"min_radius\": 0.40327526710787615,\n+                \"n_cuts\": 5,\n+                \"t_per_ps_point_in_s\": 1.6029975030000002e-05\n+            },\n+            {\n+                \"revision\": \"e58c4b7\",\n+                \"diff\": false,\n+                \"num_samples\": 3000000000,\n+                \"topology\": \"Pentagon_3s\",\n+                \"result\": [\n+                    -3.4904381637898847e-12,\n+                    -3.89965258093251e-12\n+                ],\n+                \"error\": [\n+                    5.353942483469516e-16,\n+                    5.359465978210642e-16\n+                ],\n+                \"analytical_result\": [\n+                    -3.48997234169132e-12,\n+                    -3.90012989047481e-12\n+                ],\n+                \"n_unique_existing_E_surface\": 8,\n+                \"n_sources\": 3,\n+                \"maximal_overlap\": [\n+                    [\n+                        0,\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        6,\n+                        7\n+                    ],\n+                    [\n+                        0,\n+                        1,\n+                        3,\n+                        4,\n+                        5,\n+                        6,\n+                        7\n+                    ],\n+                    [\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        5,\n+                        6,\n+                        7\n+                    ]\n+                ],\n+                \"max_radius\": 0.9076633786996682,\n+                \"min_radius\": 0.30255307360392636,\n+                \"n_cuts\": 5,\n+                \"t_per_ps_point_in_s\": 1.7073532620000002e-05\n+            },\n+            {\n+                \"revision\": \"e58c4b7\",\n+                \"diff\": false,\n+                \"num_samples\": 3000000000,\n+                \"topology\": \"Hexagon_1s\",\n+                \"result\": [\n+                    3.0459404164059255e-15,\n+                    -1.176905529422933e-13\n+                ],\n+                \"error\": [\n+                    5.761429838674876e-18,\n+                    7.584395335157175e-18\n+                ],\n+                \"analytical_result\": [\n+                    3.039790437605862e-15,\n+                    -1.1768253326142644e-13\n+                ],\n+                \"n_unique_existing_E_surface\": 12,\n+                \"n_sources\": 1,\n+                \"maximal_overlap\": [\n+                    [\n+                        0,\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        5,\n+                        6,\n+                        7,\n+                        8,\n+                        9,\n+                        10,\n+                        11\n+                    ]\n+                ],\n+                \"max_radius\": 0.4088455036267332,\n+                \"min_radius\": 0.4088455036267332,\n+                \"n_cuts\": 6,\n+                \"t_per_ps_point_in_s\": 2.007766019e-05\n+            },\n+            {\n+                \"revision\": \"e58c4b7\",\n+                \"diff\": false,\n+                \"num_samples\": 3000000000,\n+                \"topology\": \"Hexagon_2s\",\n+                \"result\": [\n+                    1.3695046081982534e-15,\n+                    -2.2595663395225988e-15\n+                ],\n+                \"error\": [\n+                    5.165591008153737e-19,\n+                    5.292001288671944e-19\n+                ],\n+                \"analytical_result\": [\n+                    1.3691802654305414e-15,\n+                    -2.259008667111004e-15\n+                ],\n+                \"n_unique_existing_E_surface\": 12,\n+                \"n_sources\": 2,\n+                \"maximal_overlap\": [\n+                    [\n+                        0,\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        5,\n+                        7,\n+                        8,\n+                        9,\n+                        10,\n+                        11\n+                    ],\n+                    [\n+                        2,\n+                        3,\n+                        4,\n+                        5,\n+                        6,\n+                        7,\n+                        8,\n+                        9,\n+                        10,\n+                        11\n+                    ]\n+                ],\n+                \"max_radius\": 2.099076035227802,\n+                \"min_radius\": 0.8285164926047437,\n+                \"n_cuts\": 6,\n+                \"t_per_ps_point_in_s\": 2.028461713e-05\n+            },\n+            {\n+                \"revision\": \"e58c4b7\",\n+                \"diff\": false,\n+                \"num_samples\": 3000000000,\n+                \"topology\": \"Hexagon_3s\",\n+                \"result\": [\n+                    1.29802348528159e-15,\n+                    -2.165552810771118e-15\n+                ],\n+                \"error\": [\n+                    3.776107413553063e-19,\n+                    3.683029392577343e-19\n+                ],\n+                \"analytical_result\": [\n+                    1.297703695865679e-15,\n+                    -2.1658951065401658e-15\n+                ],\n+                \"n_unique_existing_E_surface\": 12,\n+                \"n_sources\": 3,\n+                \"maximal_overlap\": [\n+                    [\n+                        3,\n+                        4,\n+                        5,\n+                        6,\n+                        7,\n+                        8,\n+                        9,\n+                        10,\n+                        11\n+                    ],\n+                    [\n+                        0,\n+                        2,\n+                        3,\n+                        4,\n+                        5,\n+                        6,\n+                        7,\n+                        8,\n+                        10,\n+                        11\n+                    ],\n+                    [\n+                        0,\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        5,\n+                        7,\n+                        8,\n+                        10,\n+                        11\n+                    ]\n+                ],\n+                \"max_radius\": 5.735825937783376,\n+                \"min_radius\": 0.04902636934460102,\n+                \"n_cuts\": 6,\n+                \"t_per_ps_point_in_s\": 2.182365255e-05\n+            },\n+            {\n+                \"revision\": \"e58c4b7\",\n+                \"diff\": false,\n+                \"num_samples\": 3000000000,\n+                \"topology\": \"Hexagon_4s\",\n+                \"result\": [\n+                    8.039068476989219e-17,\n+                    -1.1527770760076977e-14\n+                ],\n+                \"error\": [\n+                    1.400112440749682e-18,\n+                    1.403708853282829e-18\n+                ],\n+                \"analytical_result\": [\n+                    7.939620566544445e-17,\n+                    -1.1528177654174178e-14\n+                ],\n+                \"n_unique_existing_E_surface\": 12,\n+                \"n_sources\": 4,\n+                \"maximal_overlap\": [\n+                    [\n+                        3,\n+                        4,\n+                        5,\n+                        6,\n+                        7,\n+                        8,\n+                        9,\n+                        10\n+                    ],\n+                    [\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        5,\n+                        6,\n+                        7,\n+                        8,\n+                        10\n+                    ],\n+                    [\n+                        1,\n+                        3,\n+                        4,\n+                        5,\n+                        7,\n+                        8,\n+                        9,\n+                        10,\n+                        11\n+                    ],\n+                    [\n+                        0,\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        5,\n+                        7,\n+                        8,\n+                        10,\n+                        11\n+                    ]\n+                ],\n+                \"max_radius\": 4.257656107508775,\n+                \"min_radius\": 0.24140923511191437,\n+                \"n_cuts\": 6,\n+                \"t_per_ps_point_in_s\": 2.231638067e-05\n+            },\n+            {\n+                \"revision\": \"e58c4b7\",\n+                \"diff\": false,\n+                \"num_samples\": 3000000000,\n+                \"topology\": \"Pentagon_10E_1s\",\n+                \"result\": [\n+                    -3.648738841393581e-17,\n+                    5.971434574394943e-13\n+                ],\n+                \"error\": [\n+                    2.881865344981224e-17,\n+                    2.852554192663612e-17\n+                ],\n+                \"analytical_result\": [\n+                    -0.0,\n+                    5.971433616274931e-13\n+                ],\n+                \"n_unique_existing_E_surface\": 10,\n+                \"n_sources\": 1,\n+                \"maximal_overlap\": [\n+                    [\n+                        0,\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        5,\n+                        6,\n+                        7,\n+                        8,\n+                        9\n+                    ]\n+                ],\n+                \"max_radius\": 3.786614917629435,\n+                \"min_radius\": 3.786614917629435,\n+                \"n_cuts\": 5,\n+                \"t_per_ps_point_in_s\": 1.4948364370000001e-05\n+            },\n+            {\n+                \"revision\": \"e58c4b7\",\n+                \"diff\": false,\n+                \"num_samples\": 3000000000,\n+                \"topology\": \"Pentagon_6E_4s\",\n+                \"result\": [\n+                    9.003594214070809e-11,\n+                    4.1782263010804555e-10\n+                ],\n+                \"error\": [\n+                    7.630548268661427e-14,\n+                    7.96620616634858e-14\n+                ],\n+                \"analytical_result\": [\n+                    8.992e-11,\n+                    4.17837e-10\n+                ],\n+                \"n_unique_existing_E_surface\": 6,\n+                \"n_sources\": 4,\n+                \"maximal_overlap\": [\n+                    [\n+                        4,\n+                        5\n+                    ],\n+                    [\n+                        1,\n+                        4\n+                    ],\n+                    [\n+                        0,\n+                        2,\n+                        5\n+                    ],\n+                    [\n+                        0,\n+                        1,\n+                        2,\n+                        3\n+                    ]\n+                ],\n+                \"max_radius\": 5.186074446817182,\n+                \"min_radius\": 1.005099330366801,\n+                \"n_cuts\": 5,\n+                \"t_per_ps_point_in_s\": 1.899470561e-05\n+            },\n+            {\n+                \"revision\": \"e58c4b7\",\n+                \"diff\": false,\n+                \"num_samples\": 3000000000,\n+                \"topology\": \"Pentagon_8E_5s\",\n+                \"result\": [\n+                    4.227202979003788e-15,\n+                    -2.1811791970266174e-13\n+                ],\n+                \"error\": [\n+                    6.813279461202855e-17,\n+                    6.817029424991936e-17\n+                ],\n+                \"analytical_result\": [\n+                    4.118696992009977e-15,\n+                    -2.1805718929649134e-13\n+                ],\n+                \"n_unique_existing_E_surface\": 8,\n+                \"n_sources\": 5,\n+                \"maximal_overlap\": [\n+                    [\n+                        3,\n+                        5,\n+                        6,\n+                        7\n+                    ],\n+                    [\n+                        3,\n+                        4,\n+                        5,\n+                        6\n+                    ],\n+                    [\n+                        0,\n+                        1,\n+                        2,\n+                        3,\n+                        6\n+                    ],\n+                    [\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        6\n+                    ],\n+                    [\n+                        0,\n+                        2,\n+                        3,\n+                        6,\n+                        7\n+                    ]\n+                ],\n+                \"max_radius\": 7.983430286348121,\n+                \"min_radius\": 2.9355389326095365,\n+                \"n_cuts\": 5,\n+                \"t_per_ps_point_in_s\": 1.930983758e-05\n+            },\n+            {\n+                \"revision\": \"e58c4b7\",\n+                \"diff\": false,\n+                \"num_samples\": 3000000000,\n+                \"topology\": \"Hexagon_6E_4s\",\n+                \"result\": [\n+                    -2.7225460843242854e-15,\n+                    -1.208949917859869e-14\n+                ],\n+                \"error\": [\n+                    1.0274680221493516e-18,\n+                    1.116904851260761e-18\n+                ],\n+                \"analytical_result\": [\n+                    -2.7216841734816e-15,\n+                    -1.2089609024538e-14\n+                ],\n+                \"n_unique_existing_E_surface\": 6,\n+                \"n_sources\": 4,\n+                \"maximal_overlap\": [\n+                    [\n+                        3,\n+                        4\n+                    ],\n+                    [\n+                        0,\n+                        1,\n+                        2\n+                    ],\n+                    [\n+                        1,\n+                        3,\n+                        5\n+                    ],\n+                    [\n+                        1,\n+                        2,\n+                        4\n+                    ]\n+                ],\n+                \"max_radius\": 6.220756487313379,\n+                \"min_radius\": 2.814951207377592,\n+                \"n_cuts\": 6,\n+                \"t_per_ps_point_in_s\": 2.2338318469999997e-05\n+            },\n+            {\n+                \"revision\": \"e58c4b7\",\n+                \"diff\": false,\n+                \"num_samples\": 3000000000,\n+                \"topology\": \"Hexagon_10E_4s\",\n+                \"result\": [\n+                    -3.0197644507437884e-17,\n+                    -7.732804707163594e-17\n+                ],\n+                \"error\": [\n+                    4.044272171259297e-21,\n+                    4.736867099970893e-21\n+                ],\n+                \"analytical_result\": [\n+                    -3.0193937848736e-17,\n+                    -7.73337287748906e-17\n+                ],\n+                \"n_unique_existing_E_surface\": 10,\n+                \"n_sources\": 4,\n+                \"maximal_overlap\": [\n+                    [\n+                        0,\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        5,\n+                        7\n+                    ],\n+                    [\n+                        0,\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        7,\n+                        9\n+                    ],\n+                    [\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        6,\n+                        7,\n+                        8,\n+                        9\n+                    ],\n+                    [\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        5,\n+                        6,\n+                        7,\n+                        8\n+                    ]\n+                ],\n+                \"max_radius\": 6.457329370098939,\n+                \"min_radius\": 5.362493813470698,\n+                \"n_cuts\": 6,\n+                \"t_per_ps_point_in_s\": 2.3273833700000002e-05\n+            },\n+            {\n+                \"revision\": \"e58c4b7\",\n+                \"diff\": false,\n+                \"num_samples\": 3000000000,\n+                \"topology\": \"Hexagon_9E_4s\",\n+                \"result\": [\n+                    2.837766457510082e-17,\n+                    8.314395986921957e-18\n+                ],\n+                \"error\": [\n+                    4.036432755422328e-21,\n+                    4.036460879602536e-21\n+                ],\n+                \"analytical_result\": [\n+                    2.83771892273698e-17,\n+                    8.3141576190839e-18\n+                ],\n+                \"n_unique_existing_E_surface\": 9,\n+                \"n_sources\": 4,\n+                \"maximal_overlap\": [\n+                    [\n+                        3,\n+                        4,\n+                        7,\n+                        8\n+                    ],\n+                    [\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        5,\n+                        6\n+                    ],\n+                    [\n+                        0,\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        5\n+                    ],\n+                    [\n+                        0,\n+                        1,\n+                        3,\n+                        4,\n+                        5,\n+                        8\n+                    ]\n+                ],\n+                \"max_radius\": 4.007638428677227,\n+                \"min_radius\": 0.30646636815479317,\n+                \"n_cuts\": 6,\n+                \"t_per_ps_point_in_s\": 2.341274769e-05\n+            },\n+            {\n+                \"revision\": \"e58c4b7\",\n+                \"diff\": false,\n+                \"num_samples\": 3000000000,\n+                \"topology\": \"Hexagon_10E_7s\",\n+                \"result\": [\n+                    0.021348715457873483,\n+                    0.006576971196002383\n+                ],\n+                \"error\": [\n+                    0.0003229996966132615,\n+                    0.0003145215284538745\n+                ],\n+                \"analytical_result\": [\n+                    0.0211928148966,\n+                    0.0064030325864\n+                ],\n+                \"n_unique_existing_E_surface\": 10,\n+                \"n_sources\": 4,\n+                \"maximal_overlap\": [\n+                    [\n+                        6,\n+                        7,\n+                        9\n+                    ],\n+                    [\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        7\n+                    ],\n+                    [\n+                        3,\n+                        4,\n+                        5,\n+                        6,\n+                        7,\n+                        8\n+                    ],\n+                    [\n+                        0,\n+                        1,\n+                        2,\n+                        3,\n+                        7,\n+                        8,\n+                        9\n+                    ]\n+                ],\n+                \"max_radius\": 0.02940297893925176,\n+                \"min_radius\": 0.004518241163681492,\n+                \"n_cuts\": 6,\n+                \"t_per_ps_point_in_s\": 2.387074937e-05\n+            },\n+            {\n+                \"revision\": \"e58c4b7\",\n+                \"diff\": false,\n+                \"num_samples\": 3000000000,\n+                \"topology\": \"Hexagon_10E_5s\",\n+                \"result\": [\n+                    -2.815831183774937,\n+                    2.473079448847676\n+                ],\n+                \"error\": [\n+                    0.0005955666397077435,\n+                    0.0006109643636314382\n+                ],\n+                \"analytical_result\": [\n+                    -2.81475384,\n+                    2.4732705\n+                ],\n+                \"n_unique_existing_E_surface\": 10,\n+                \"n_sources\": 5,\n+                \"maximal_overlap\": [\n+                    [\n+                        1,\n+                        2,\n+                        3,\n+                        4,\n+                        6,\n+                        7\n+                    ],\n+                    [\n+                        3,\n+                        4,\n+                        5,\n+                        6,\n+                        7,\n+                        8\n+                    ],\n+                    [\n+                        2,\n+                        3,\n+                        4,\n+                        6,\n+                        7,\n+                        8,\n+                        9\n+                    ],\n+                    [\n+                        0,\n+                        1,\n+                        2,\n+                        3,\n+                        6,\n+                        7,\n+                        9\n+                    ],\n+                    [\n+                        0,\n+                        2,\n+                        3,\n+                        6,\n+                        7,\n+                        8,\n+                        9\n+                    ]\n+                ],\n+                \"max_radius\": 0.09531950637929755,\n+                \"min_radius\": 0.03157151617809414,\n+                \"n_cuts\": 6,\n+                \"t_per_ps_point_in_s\": 2.4112357960000002e-05\n+            },\n+            {\n+                \"revision\": \"e58c4b7\",\n+                \"diff\": false,\n+                \"num_samples\": 3000000000,\n+                \"topology\": \"Hexagon_6E_2s\",\n+                \"result\": [\n+                    -20.739175334430474,\n+                    4.259325091265933\n+                ],\n+                \"error\": [\n+                    0.018849099955038896,\n+                    0.016116058066932573\n+                ],\n+                \"analytical_result\": [\n+                    -20.7013988797142,\n+                    4.234325146404\n+                ],\n+                \"n_unique_existing_E_surface\": 6,\n+                \"n_sources\": 2,\n+                \"maximal_overlap\": [\n+                    [\n+                        5\n+                    ],\n+                    [\n+                        0,\n+                        1,\n+                        2,\n+                        3,\n+                        4\n+                    ]\n+                ],\n+                \"max_radius\": 0.27604347484194863,\n+                \"min_radius\": 0.10200090213853008,\n+                \"n_cuts\": 6,\n+                \"t_per_ps_point_in_s\": 2.1053052600000002e-05\n+            }\n+        ]\n+    },\n     \"1574709672.3050053\": {\n         \"hyperparameters\": {\n             \"Deformation\": {\ndiff --git a/submission_template.run b/submission_template.run\nindex c871b1c..0142515 100644\n--- a/submission_template.run\n+++ b/submission_template.run\n@@ -11,6 +11,7 @@\n #SBATCH --output=%(output)s\n #SBATCH --error=%(error)s\n #SBATCH --mail-type=start,end,fail\n+#SBATCH --account=%(account)s\n \n echo $SLURM_CPUS_PER_TASK",
        "samples": [
            {
                "revision": "e58c4b7",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_4P_PS1",
                "result": [
                    5.719285605203082e-05,
                    -7.240551769185815e-05
                ],
                "error": [
                    5.48756354908926e-09,
                    5.266474595561754e-09
                ],
                "analytical_result": [
                    5.719283734688594e-05,
                    -7.240050316920442e-05
                ],
                "n_unique_existing_E_surface": 5,
                "n_sources": 1,
                "maximal_overlap": [
                    [
                        0,
                        1,
                        2,
                        3,
                        4
                    ]
                ],
                "max_radius": 0.08809003401380297,
                "min_radius": 0.08809003401380297,
                "n_cuts": 4,
                "t_per_ps_point_in_s": 1.160118616e-05
            },
            {
                "revision": "e58c4b7",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_4P_PS1_massive",
                "result": [
                    3.0272132349009028e-05,
                    -0.00010813022878263673
                ],
                "error": [
                    3.877085505199166e-09,
                    3.879246180805722e-09
                ],
                "analytical_result": [
                    3.0270089698146673e-05,
                    -0.00010812513676074976
                ],
                "n_unique_existing_E_surface": 5,
                "n_sources": 2,
                "maximal_overlap": [
                    [
                        0,
                        1,
                        3
                    ],
                    [
                        2,
                        3,
                        4
                    ]
                ],
                "max_radius": 0.4437597128834408,
                "min_radius": 0.43301270172738693,
                "n_cuts": 4,
                "t_per_ps_point_in_s": 1.418966538e-05
            },
            {
                "revision": "e58c4b7",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_4P_PS2",
                "result": [
                    1.553756279512727e-06,
                    -2.070051026239222e-06
                ],
                "error": [
                    1.2172621601634474e-10,
                    1.2018000043682994e-10
                ],
                "analytical_result": [
                    1.5538225955752141e-06,
                    -2.06993924914093e-06
                ],
                "n_unique_existing_E_surface": 5,
                "n_sources": 1,
                "maximal_overlap": [
                    [
                        0,
                        1,
                        2,
                        3,
                        4
                    ]
                ],
                "max_radius": 0.13292445730757685,
                "min_radius": 0.13292445730757685,
                "n_cuts": 4,
                "t_per_ps_point_in_s": 1.170596768e-05
            },
            {
                "revision": "e58c4b7",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_4P_PS2_massive",
                "result": [
                    -1.7937037239327676e-07,
                    -2.2918740682675214e-06
                ],
                "error": [
                    5.11798486381283e-11,
                    8.549619661250098e-11
                ],
                "analytical_result": [
                    -1.7934889799109784e-07,
                    -2.291844646059694e-06
                ],
                "n_unique_existing_E_surface": 3,
                "n_sources": 1,
                "maximal_overlap": [
                    [
                        0,
                        1,
                        2
                    ]
                ],
                "max_radius": 1.145402262547768,
                "min_radius": 1.145402262547768,
                "n_cuts": 4,
                "t_per_ps_point_in_s": 1.1607934360000001e-05
            },
            {
                "revision": "e58c4b7",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_5P_PS1",
                "result": [
                    -1.5137390492846205e-07,
                    -1.8067175546162317e-06
                ],
                "error": [
                    3.185403017167484e-10,
                    3.294740931752987e-10
                ],
                "analytical_result": [
                    -1.5107553912862803e-07,
                    -1.8067867713233652e-06
                ],
                "n_unique_existing_E_surface": 8,
                "n_sources": 3,
                "maximal_overlap": [
                    [
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    [
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4,
                        6,
                        7
                    ]
                ],
                "max_radius": 0.2079669464568688,
                "min_radius": 0.07654241327253039,
                "n_cuts": 5,
                "t_per_ps_point_in_s": 1.772727447e-05
            },
            {
                "revision": "e58c4b7",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_5P_PS1_massive",
                "result": [
                    -4.830469639318333e-07,
                    -3.2766411978913742e-06
                ],
                "error": [
                    5.867911210752223e-10,
                    6.09519818494514e-10
                ],
                "analytical_result": [
                    -4.830268775732323e-07,
                    -3.2769517283804943e-06
                ],
                "n_unique_existing_E_surface": 8,
                "n_sources": 3,
                "maximal_overlap": [
                    [
                        3,
                        4,
                        6,
                        7
                    ],
                    [
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        0,
                        1,
                        3,
                        4,
                        6
                    ]
                ],
                "max_radius": 0.4392647949437766,
                "min_radius": 0.10327686419403583,
                "n_cuts": 5,
                "t_per_ps_point_in_s": 2.0191143880000003e-05
            },
            {
                "revision": "e58c4b7",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_5P_PS2",
                "result": [
                    -6.627088880904236e-10,
                    -1.2356695334868381e-09
                ],
                "error": [
                    3.2136953490966494e-13,
                    3.2442507044905295e-13
                ],
                "analytical_result": [
                    -6.624013972823354e-10,
                    -1.2353121661466543e-09
                ],
                "n_unique_existing_E_surface": 8,
                "n_sources": 3,
                "maximal_overlap": [
                    [
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4,
                        6,
                        7
                    ]
                ],
                "max_radius": 0.8382950773359227,
                "min_radius": 0.09917521749181563,
                "n_cuts": 5,
                "t_per_ps_point_in_s": 1.9867387460000002e-05
            },
            {
                "revision": "e58c4b7",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_5P_PS2_massive",
                "result": [
                    -1.2148843034682541e-09,
                    -1.5378529922603497e-09
                ],
                "error": [
                    2.0249467146596883e-13,
                    2.0812548549997536e-13
                ],
                "analytical_result": [
                    -1.214966736752062e-09,
                    -1.5381697365085504e-09
                ],
                "n_unique_existing_E_surface": 6,
                "n_sources": 2,
                "maximal_overlap": [
                    [
                        0,
                        1,
                        2,
                        4,
                        5
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4
                    ]
                ],
                "max_radius": 0.35544950919168916,
                "min_radius": 0.15992399021081813,
                "n_cuts": 5,
                "t_per_ps_point_in_s": 1.8367086900000002e-05
            },
            {
                "revision": "e58c4b7",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_6P_PS1",
                "result": [
                    6.040665759326828e-09,
                    -6.964363299275818e-08
                ],
                "error": [
                    2.159132642844686e-11,
                    2.132516829657379e-11
                ],
                "analytical_result": [
                    6.0439958169441965e-09,
                    -6.963387742605882e-08
                ],
                "n_unique_existing_E_surface": 12,
                "n_sources": 5,
                "maximal_overlap": [
                    [
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        3,
                        4,
                        5,
                        7,
                        8,
                        9,
                        10,
                        11
                    ],
                    [
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        10,
                        11
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        8,
                        10,
                        11
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        10
                    ]
                ],
                "max_radius": 0.26443951771647567,
                "min_radius": 0.02520761770903269,
                "n_cuts": 6,
                "t_per_ps_point_in_s": 2.6663755909999998e-05
            },
            {
                "revision": "e58c4b7",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_6P_PS1_massive",
                "result": [
                    -2.2013139072216264e-08,
                    -6.378407075496572e-08
                ],
                "error": [
                    2.4090717301818367e-11,
                    2.538422613636932e-11
                ],
                "analytical_result": [
                    -2.1993637690966305e-08,
                    -6.379305758047185e-08
                ],
                "n_unique_existing_E_surface": 12,
                "n_sources": 4,
                "maximal_overlap": [
                    [
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        10
                    ],
                    [
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        10,
                        11
                    ],
                    [
                        3,
                        4,
                        5,
                        7,
                        8,
                        9,
                        10,
                        11
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        8,
                        10
                    ]
                ],
                "max_radius": 0.18022028561477468,
                "min_radius": 0.0013787371651508332,
                "n_cuts": 6,
                "t_per_ps_point_in_s": 2.6750498989999998e-05
            },
            {
                "revision": "e58c4b7",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_6P_PS2",
                "result": [
                    4.065532033827216e-13,
                    -2.515879151233608e-12
                ],
                "error": [
                    1.5186877697187903e-15,
                    1.570645788172482e-15
                ],
                "analytical_result": [
                    4.065953804127873e-13,
                    -2.519559691664058e-12
                ],
                "n_unique_existing_E_surface": 12,
                "n_sources": 3,
                "maximal_overlap": [
                    [
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        10
                    ],
                    [
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        8,
                        10,
                        11
                    ]
                ],
                "max_radius": 0.6675257893957702,
                "min_radius": 0.0019030855255321014,
                "n_cuts": 6,
                "t_per_ps_point_in_s": 2.540658335e-05
            },
            {
                "revision": "e58c4b7",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_6P_PS2_massive",
                "result": [
                    -1.2751064383214321e-12,
                    -2.2608854863841147e-12
                ],
                "error": [
                    8.998065846743083e-16,
                    9.312535732205614e-16
                ],
                "analytical_result": [
                    -1.2762384791404727e-12,
                    -2.260885521661299e-12
                ],
                "n_unique_existing_E_surface": 10,
                "n_sources": 3,
                "maximal_overlap": [
                    [
                        0,
                        1,
                        2,
                        3,
                        5,
                        6,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        8,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                ],
                "max_radius": 1.6193194850485944,
                "min_radius": 0.7973039573058808,
                "n_cuts": 6,
                "t_per_ps_point_in_s": 2.452286865e-05
            },
            {
                "revision": "e58c4b7",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_8P_PS1",
                "result": [
                    4.2130862378661155e-12,
                    -1.9577115810160186e-12
                ],
                "error": [
                    4.212694391075446e-15,
                    3.944307441937469e-15
                ],
                "analytical_result": [
                    4.209151447530031e-12,
                    -1.952887510554331e-12
                ],
                "n_unique_existing_E_surface": 23,
                "n_sources": 9,
                "maximal_overlap": [
                    [
                        5,
                        6,
                        7,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        18,
                        19,
                        20,
                        21,
                        22
                    ],
                    [
                        0,
                        1,
                        4,
                        5,
                        6,
                        7,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19
                    ],
                    [
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        18,
                        19
                    ],
                    [
                        0,
                        1,
                        5,
                        6,
                        7,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        21
                    ],
                    [
                        5,
                        6,
                        7,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21
                    ],
                    [
                        3,
                        4,
                        5,
                        6,
                        7,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        18,
                        19,
                        21
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        9,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        18,
                        19,
                        21,
                        22
                    ],
                    [
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        18,
                        19,
                        21,
                        22
                    ]
                ],
                "max_radius": 0.23595226795740126,
                "min_radius": 0.006503696283405472,
                "n_cuts": 8,
                "t_per_ps_point_in_s": 4.715220238e-05
            },
            {
                "revision": "e58c4b7",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_8P_PS1_massive",
                "result": [
                    -1.1690457635588166e-12,
                    -2.7256856271949583e-12
                ],
                "error": [
                    7.93935912965797e-15,
                    9.666903069865006e-15
                ],
                "analytical_result": [
                    -1.147180088733709e-12,
                    -2.7058685535143613e-12
                ],
                "n_unique_existing_E_surface": 23,
                "n_sources": 7,
                "maximal_overlap": [
                    [
                        0,
                        1,
                        5,
                        6,
                        7,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19
                    ],
                    [
                        5,
                        6,
                        7,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21
                    ],
                    [
                        3,
                        4,
                        5,
                        6,
                        7,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19
                    ],
                    [
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        18,
                        19,
                        21
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        9,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        18,
                        19,
                        21
                    ],
                    [
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        9,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        18,
                        19,
                        21,
                        22
                    ],
                    [
                        0,
                        1,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        18,
                        19,
                        21
                    ]
                ],
                "max_radius": 0.3310476241864256,
                "min_radius": 0.010017041429969946,
                "n_cuts": 8,
                "t_per_ps_point_in_s": 4.540868835e-05
            },
            {
                "revision": "e58c4b7",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_8P_PS2",
                "result": [
					1.2693123989212017e-19,
					-8.402341467968121e-20
                ],
                "error": [
					4.855187184978326e-22,
					5.025195700912092e-22
                ],
                "analytical_result": [
                    1.2737915320999571e-19,
                    -8.256713978917572e-20
                ],
                "n_unique_existing_E_surface": 23,
                "n_sources": 12,
                "maximal_overlap": [
                    [
                        3,
                        4,
                        5,
                        6,
                        7,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        21
                    ],
                    [
                        1,
                        4,
                        5,
                        6,
                        7,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        21
                    ],
                    [
                        0,
                        1,
                        5,
                        6,
                        7,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        21
                    ],
                    [
                        5,
                        6,
                        7,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        18,
                        19,
                        20,
                        21,
                        22
                    ],
                    [
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        18,
                        19
                    ],
                    [
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        18,
                        19,
                        21,
                        22
                    ],
                    [
                        5,
                        6,
                        7,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        9,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        18,
                        19,
                        21,
                        22
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        18,
                        19,
                        21,
                        22
                    ],
                    [
                        3,
                        4,
                        5,
                        6,
                        7,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19
                    ],
                    [
                        1,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        18,
                        19,
                        21,
                        22
                    ],
                    [
                        0,
                        1,
                        3,
                        4,
                        5,
                        6,
                        7,
                        9,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        18,
                        19,
                        21,
                        22
                    ]
                ],
                "max_radius": 1.7008297098743437,
                "min_radius": 0.01004215103177078,
                "n_cuts": 8,
                "t_per_ps_point_in_s": 5.151018379e-05
            },
            {
                "revision": "e58c4b7",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_8P_PS2_massive",
                "result": [
                    -5.703962982780212e-21,
                    -4.113036481525507e-20
                ],
                "error": [
                    2.050341247221975e-23,
                    2.021392908598526e-23
                ],
                "analytical_result": [
                    -5.68050041076085e-21,
                    -4.1154654290794026e-20
                ],
                "n_unique_existing_E_surface": 21,
                "n_sources": 6,
                "maximal_overlap": [
                    [
                        3,
                        4,
                        5,
                        8,
                        9,
                        10,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19
                    ],
                    [
                        3,
                        4,
                        5,
                        8,
                        9,
                        10,
                        12,
                        13,
                        14,
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        8,
                        9,
                        10,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        19
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        12,
                        13,
                        14,
                        16,
                        17,
                        19,
                        20
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        8,
                        9,
                        10,
                        12,
                        13,
                        14,
                        16,
                        17,
                        19,
                        20
                    ]
                ],
                "max_radius": 1.3626885072611126,
                "min_radius": 0.05968715192623164,
                "n_cuts": 8,
                "t_per_ps_point_in_s": 4.170094953000001e-05
            }
        ]
    },
    "1574710017.6586847": {
        "hyperparameters": {
            "Deformation": {
                "additive": {
                    "a_ij": 0.01,
                    "a_ijs": [],
                    "mode": "exponential"
                },
                "fixed": {
                    "M_ij": 1.0,
                    "a_ijs": [],
                    "delta": 0.3,
                    "include_normal_source": false,
                    "local": false,
                    "m_ijs": [],
                    "mode": "hyperbolic",
                    "normalisation_of_subspace_components": true,
                    "normalisation_per_number_of_sources": true,
                    "normalize_per_source": false,
                    "sigma": 0.0,
                    "source_dampening_factor": -0.0005
                },
                "lambdas": [],
                "max_iterations": 1,
                "normalize_on_E_surfaces_m": -1.0,
                "overall_scaling": "constant",
                "overall_scaling_constant": 1.0,
                "scaling": {
                    "branch_cut_m": -1.0,
                    "cut_propagator_check": false,
                    "expansion_check": true,
                    "expansion_check_strategy": "ratio",
                    "expansion_threshold": -0.3,
                    "lambda": 10.0,
                    "non_cut_propagator_check": true,
                    "pole_check_strategy": "real_solution",
                    "positive_cut_check": true,
                    "skip_hyperboloids": true,
                    "softmin_sigma": 0.0,
                    "source_branch_cut_m": -1.0,
                    "source_branch_cut_multiplier": 0.8,
                    "source_branch_cut_threshold": 0.8,
                    "theta_c": 2.0,
                    "theta_r_in": 2.0,
                    "theta_r_out": 2.0
                },
                "stability_threshold": -1
            },
            "General": {
                "absolute_precision": 1e+99,
                "amplitude": "",
                "cut_filter": [],
                "debug": 0,
                "deformation_strategy": "fixed",
                "integration_statistics": false,
                "log_file_prefix": "stats/statistics",
                "log_points_to_screen": false,
                "log_stats_to_screen": false,
                "minimal_precision_for_returning_result": 2.0,
                "mu_uv_sq_re_im": [
                    10000.0,
                    0
                ],
                "multi_channeling": false,
                "multi_channeling_channel": null,
                "num_digits_different_for_inconsistency": 10.0,
                "numerical_instability_check": true,
                "numerical_threshold": 0.0,
                "python_numerator": null,
                "relative_precision": 3.0,
                "res_file_prefix": "",
                "screen_log_core": 1,
                "statistics_interval": 100000,
                "topology": "Box",
                "unstable_point_warning_percentage": 1.0,
                "use_collinear_ct": false,
                "use_ct": false
            },
            "Integrator": {
                "border": 0.001,
                "eps_abs": 0.0,
                "eps_rel": 1e-08,
                "flatness": 50.0,
                "integrated_phase": "both",
                "integrator": "vegas",
                "keep_state_file": false,
                "max_pass": 5,
                "maxchisq": 0.0,
                "mindeviation": 0.025,
                "n_increase": 100000,
                "n_max": 10000000000,
                "n_min": 2,
                "n_new": 100000,
                "n_start": 100000,
                "n_vec": 1,
                "refine_n_points": 0,
                "refine_n_runs": 0,
                "reset_vegas_integrator": true,
                "seed": 1,
                "state_filename_prefix": null,
                "survey_n_iterations": 0,
                "survey_n_points": 0,
                "use_only_last_sample": false
            },
            "Parameterization": {
                "b": 1.0,
                "input_rescaling": [
                    [
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ]
                    ],
                    [
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ]
                    ],
                    [
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ]
                    ],
                    [
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ]
                    ],
                    [
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ]
                    ],
                    [
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ],
                        [
                            0.0,
                            1.0
                        ]
                    ]
                ],
                "mapping": "linear",
                "mode": "spherical",
                "shifts": [
                    [
                        1.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        1.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        1.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        1.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        1.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        1.0,
                        0.0,
                        0.0,
                        0.0
                    ]
                ]
            }
        },
        "diff": "diff --git a/LTD/ltd_commons.py b/LTD/ltd_commons.py\nindex 328aa81..ae096ac 100755\n--- a/LTD/ltd_commons.py\n+++ b/LTD/ltd_commons.py\n@@ -135,9 +135,9 @@ hyperparameters = HyperParameters({\n             'source_branch_cut_multiplier' : 0.8,\n             # the strategy can be real_solution (the old method), exact (for 1 loop), and tangent_check\n             'pole_check_strategy'       : 'real_solution',\n-            'theta_r_out'               : 10.,\n-            'theta_r_in'                : 10.,\n-            'theta_c'                   : 10.,\n+            'theta_r_out'               : 2.,\n+            'theta_r_in'                : 2.,\n+            'theta_c'                   : 2.,\n         },\n \n         'additive'              :   {\ndiff --git a/benchmark.py b/benchmark.py\nindex f9c6bb0..1e3fb00 100755\n--- a/benchmark.py\n+++ b/benchmark.py\n@@ -382,7 +382,53 @@ class Benchmark(list):\n \n         for topo in explore_1loop:\n             #res.append(BenchmarkRun1loop(topo, samples=50*Units.M))\n-            res.append(BenchmarkRun2loop(topo, n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+            res.append(BenchmarkRun2loop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+        return res\n+\n+    def get_explore_HigherLoop(self):\n+        res = []\n+\n+        # 1-loop topologies\n+        res.extend(self.get_1loop())\n+\n+        # 2-loop topologies\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_A\", n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_B\", n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_C\", n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_D\", n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_E\", n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_F\", n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+        res.append(BenchmarkRun2loop(\"T3_DoubleBox_Weinzierl\",n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+\n+        # 3-loop topologies\n+        res.append(BenchmarkRun3loop(\"T4_TripleBox_Weinzierl\",n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+\n+        # 4-loop topologies\n+        res.append(BenchmarkRunHighloop(\"T4_Quadruple_Box_Weinzierl\",n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+\n+        return res\n+\n+    def get_explore_HigherLoop_low_stat(self):\n+        res = []\n+\n+        # 1-loop topologies\n+        res.extend(self.get_1loop())\n+\n+        # 2-loop topologies\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_A\", n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_B\", n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_C\", n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_D\", n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_E\", n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+        res.append(BenchmarkRun2loop(\"T2_6P_2L_Weinzierl_F\", n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+        res.append(BenchmarkRun2loop(\"T3_DoubleBox_Weinzierl\",n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+\n+        # 3-loop topologies\n+        res.append(BenchmarkRun3loop(\"T4_TripleBox_Weinzierl\",n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+\n+        # 4-loop topologies\n+        res.append(BenchmarkRunHighloop(\"T4_Quadruple_Box_Weinzierl\",n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+\n         return res\n \n     def get_short_Valentin(self):\n@@ -459,7 +505,8 @@ class Benchmark(list):\n ]\n         for topo in PS1PS2_1loop:\n             #res.append(BenchmarkRun1loop(topo, samples=50*Units.M))\n-            res.append(BenchmarkRun2loop(topo, n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+            res.append(BenchmarkRun2loop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n+            #res.append(BenchmarkRun2loop(topo, n_start=1000*Units.K, n_increase=100*Units.K, samples=1000*Units.M))\n         return res\n \n     def get_PS1PS2_2loop(self):\n@@ -514,7 +561,7 @@ class Benchmark(list):\n \n ]\n         for topo in PS1PS2_2loop:\n-            res.append(BenchmarkRun2loop(topo, n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+            res.append(BenchmarkRun2loop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n         return res\n \n     def get_PS1PS2_3loop(self):\n@@ -535,7 +582,7 @@ class Benchmark(list):\n \n ]\n         for topo in PS1PS2_3loop:\n-            res.append(BenchmarkRun3loop(topo, n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+            res.append(BenchmarkRun3loop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n         return res\n \n     def get_PS1PS2_4loop(self):\n@@ -555,7 +602,7 @@ class Benchmark(list):\n \n ]\n         for topo in PS1PS2_4loop:\n-            res.append(BenchmarkRunHighloop(topo, n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+            res.append(BenchmarkRunHighloop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n         return res\n \n \n@@ -574,7 +621,7 @@ class Benchmark(list):\n ]\n         for topo in PS3_1loop:\n             #res.append(BenchmarkRun1loop(topo, samples=50*Units.M))\n-            res.append(BenchmarkRun2loop(topo, n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+            res.append(BenchmarkRun2loop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n         return res\n \n     def get_PS3_2loop(self):\n@@ -604,7 +651,7 @@ class Benchmark(list):\n '2L_8P_PS3_massive',\n ]\n         for topo in PS3_2loop:\n-            res.append(BenchmarkRun2loop(topo, n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+            res.append(BenchmarkRun2loop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n         return res\n \n     def get_PS3_3loop(self):\n@@ -620,7 +667,7 @@ class Benchmark(list):\n \n ]\n         for topo in PS3_3loop:\n-            res.append(BenchmarkRun3loop(topo, n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+            res.append(BenchmarkRun3loop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n         return res\n \n     def get_PS3_4loop(self):\n@@ -640,7 +687,7 @@ class Benchmark(list):\n \n ]\n         for topo in PS3_4loop:\n-            res.append(BenchmarkRunHighloop(topo, n_start=1000*Units.K, n_increase=1000*Units.K, samples=300*Units.M))\n+            res.append(BenchmarkRunHighloop(topo, n_start=10000*Units.K, n_increase=1000*Units.K, samples=3000*Units.M))\n         return res\n \n def get_history(history_path):\ndiff --git a/submission_template.run b/submission_template.run\nindex c871b1c..0142515 100644\n--- a/submission_template.run\n+++ b/submission_template.run\n@@ -11,6 +11,7 @@\n #SBATCH --output=%(output)s\n #SBATCH --error=%(error)s\n #SBATCH --mail-type=start,end,fail\n+#SBATCH --account=%(account)s\n \n echo $SLURM_CPUS_PER_TASK",
        "samples": [
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_4P_PS1",
                "result": [
                    5.719285605203082e-05,
                    -7.240551769185815e-05
                ],
                "error": [
                    5.48756354908926e-09,
                    5.266474595561754e-09
                ],
                "analytical_result": [
                    5.719283734688594e-05,
                    -7.240050316920442e-05
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_4P_PS1_massive",
                "result": [
                    3.0272132349009028e-05,
                    -0.00010813022878263673
                ],
                "error": [
                    3.877085505199166e-09,
                    3.879246180805722e-09
                ],
                "analytical_result": [
                    3.0270089698146673e-05,
                    -0.00010812513676074976
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_4P_PS2",
                "result": [
                    1.553756279512727e-06,
                    -2.070051026239222e-06
                ],
                "error": [
                    1.2172621601634474e-10,
                    1.2018000043682994e-10
                ],
                "analytical_result": [
                    1.5538225955752141e-06,
                    -2.06993924914093e-06
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_4P_PS2_massive",
                "result": [
                    -1.7937037239327676e-07,
                    -2.2918740682675214e-06
                ],
                "error": [
                    5.11798486381283e-11,
                    8.549619661250098e-11
                ],
                "analytical_result": [
                    -1.7934889799109784e-07,
                    -2.291844646059694e-06
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_5P_PS1",
                "result": [
                    -1.5137390492846205e-07,
                    -1.8067175546162317e-06
                ],
                "error": [
                    3.185403017167484e-10,
                    3.294740931752987e-10
                ],
                "analytical_result": [
                    -1.5107553912862803e-07,
                    -1.8067867713233652e-06
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_5P_PS1_massive",
                "result": [
                    -4.830469639318333e-07,
                    -3.2766411978913742e-06
                ],
                "error": [
                    5.867911210752223e-10,
                    6.09519818494514e-10
                ],
                "analytical_result": [
                    -4.830268775732323e-07,
                    -3.2769517283804943e-06
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_5P_PS2",
                "result": [
                    -6.627088880904236e-10,
                    -1.2356695334868381e-09
                ],
                "error": [
                    3.2136953490966494e-13,
                    3.2442507044905295e-13
                ],
                "analytical_result": [
                    -6.624013972823354e-10,
                    -1.2353121661466543e-09
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_5P_PS2_massive",
                "result": [
                    -1.2148843034682541e-09,
                    -1.5378529922603497e-09
                ],
                "error": [
                    2.0249467146596883e-13,
                    2.0812548549997536e-13
                ],
                "analytical_result": [
                    -1.214966736752062e-09,
                    -1.5381697365085504e-09
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_6P_PS1",
                "result": [
                    6.040665759326828e-09,
                    -6.964363299275818e-08
                ],
                "error": [
                    2.159132642844686e-11,
                    2.132516829657379e-11
                ],
                "analytical_result": [
                    6.0439958169441965e-09,
                    -6.963387742605882e-08
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_6P_PS1_massive",
                "result": [
                    -2.2013139072216264e-08,
                    -6.378407075496572e-08
                ],
                "error": [
                    2.4090717301818367e-11,
                    2.538422613636932e-11
                ],
                "analytical_result": [
                    -2.1993637690966305e-08,
                    -6.379305758047185e-08
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_6P_PS2",
                "result": [
                    4.065532033827216e-13,
                    -2.515879151233608e-12
                ],
                "error": [
                    1.5186877697187903e-15,
                    1.570645788172482e-15
                ],
                "analytical_result": [
                    4.065953804127873e-13,
                    -2.519559691664058e-12
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_6P_PS2_massive",
                "result": [
                    -1.2751064383214321e-12,
                    -2.2608854863841147e-12
                ],
                "error": [
                    8.998065846743083e-16,
                    9.312535732205614e-16
                ],
                "analytical_result": [
                    -1.2762384791404727e-12,
                    -2.260885521661299e-12
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_8P_PS1",
                "result": [
                    4.2130862378661155e-12,
                    -1.9577115810160186e-12
                ],
                "error": [
                    4.212694391075446e-15,
                    3.944307441937469e-15
                ],
                "analytical_result": [
                    4.209151447530031e-12,
                    -1.952887510554331e-12
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_8P_PS1_massive",
                "result": [
                    -1.1690457635588166e-12,
                    -2.7256856271949583e-12
                ],
                "error": [
                    7.93935912965797e-15,
                    9.666903069865006e-15
                ],
                "analytical_result": [
                    -1.147180088733709e-12,
                    -2.7058685535143613e-12
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_8P_PS2",
                "result": [
					1.2693123989212017e-19,
					-8.402341467968121e-20
                ],
                "error": [
					4.855187184978326e-22,
					5.025195700912092e-22
                ],
                "analytical_result": [
                    1.2737915320999571e-19,
                    -8.256713978917572e-20
                ]
            },
            {
                "revision": "fb5c14f",
                "diff": false,
                "num_samples": 3000000000,
                "topology": "1L_8P_PS2_massive",
                "result": [
                    -5.703962982780212e-21,
                    -4.113036481525507e-20
                ],
                "error": [
                    2.050341247221975e-23,
                    2.021392908598526e-23
                ],
                "analytical_result": [
                    -5.68050041076085e-21,
                    -4.1154654290794026e-20
                ]
            }
        ]
    }
}
