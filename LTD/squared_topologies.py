from ltd_utils import TopologyGenerator
import copy
import math
from itertools import combinations_with_replacement
import vectors

class SquaredTopologyGenerator:
    def __init__(self, edges, name, incoming_momentum_names, n_cuts, external_momenta, final_state_particle_ids=(),
        loop_momenta_names=None, masses={}, powers=None, particle_ids={}, overall_numerator=1., numerator_structure={},
        cut_filter=set()):
        self.name = name
        self.topo = TopologyGenerator(edges, powers)
        self.topo.generate_momentum_flow(loop_momenta_names)
        self.external_momenta = external_momenta
        
        cutkosky_cuts = self.topo.find_cutkosky_cuts(n_cuts, incoming_momentum_names, final_state_particle_ids, particle_ids)

        self.cuts = [bc for c in cutkosky_cuts for bc in self.topo.bubble_cuts(c, incoming_momentum_names)]

        if len(cut_filter) > 0:
            self.cuts = [c for c in self.cuts if tuple(n['edge'] for n in c['cuts']) in cut_filter]

        self.masses = copy.deepcopy(masses)
        self.overall_numerator = overall_numerator
        self.incoming_momenta = incoming_momentum_names

        edge_map = self.topo.get_signature_map()

        mu_uv = 2. * math.sqrt(sum(self.external_momenta[e][0] for e in self.incoming_momenta)**2 - 
                        sum(x*x for x in (sum(self.external_momenta[e][i] for e in self.incoming_momenta) for i in range(1, 4))))

        self.cut_diagrams = []
        for cut_info in self.cuts:
            c = cut_info['cuts']
            sub_graphs = cut_info['graphs']

            # determine the signature of the cuts
            for cut_edge in c:
                cut_edge['signature'] = copy.deepcopy(edge_map[cut_edge['edge']])

            cut_name = tuple(a['edge'] for a in c)

            uv_limits = []
            if cut_name in numerator_structure:
                for uv_structure, numerator_struct in numerator_structure[cut_name].items():
                    sparse_numerator = [[tuple(x[0]), x[1]] for x in numerator_struct]
                    uv_limits.append((uv_structure, sparse_numerator))
            else:
                uv_limits.append((tuple(), [[tuple(), [1.0, 0.]]]))

            uv_limit_info = []
            for uv_structure, numerator_sparse in uv_limits:
                uv_name = ('_uv_' if len(uv_structure) > 0 else '') + ''.join(uv_structure)

                max_rank = max((len(e) for e, v in numerator_sparse), default=0)

                # pad the numerator with zeros
                effective_loops = self.topo.n_loops + cut_info['n_bubbles']
                numerator_pows=[j for i in range(max_rank + 1) for j in combinations_with_replacement(range(4 * effective_loops), i)]
                numerator = [[0., 0.,] for _ in numerator_pows]

                for k, v in numerator_sparse:
                    numerator[numerator_pows.index(k)] = list(v)

                loop_topos = []
                for i, s in enumerate(sub_graphs):
                    # create a dummy numerator for the same rank
                    s.loop_momentum_bases() # sets the number of loops
                    numerator_entries = 1
                    level_size = 1
                    for cur_rank in range(0, max_rank):
                        level_size = (level_size * (s.n_loops * 4 + cur_rank)) // (cur_rank + 1)
                        numerator_entries += level_size

                    (loop_mom_map, shift_map) = self.topo.build_proto_topology(s, c)

                    loop_topo = s.create_loop_topology(name + '_' + ''.join(cut_name) + uv_name + '_' + str(i),
                        # provide dummy external momenta
                        ext_mom={edge_name: vectors.LorentzVector([0, 0, 0, 0]) for (edge_name, _, _) in self.topo.edge_map_lin},
                        fixed_deformation=False,
                        mass_map=masses,
                        loop_momentum_map=loop_mom_map,
                        numerator_tensor_coefficients=[[0., 0.] for _ in range(numerator_entries)],
                        shift_map=shift_map)

                    # take the UV limit of the diagram
                    uv_moms = [mom for mom in uv_structure if mom in set(s.edge_name_map.keys())]
                    for ll in loop_topo.loop_lines:
                        if any(p for p in ll.propagators if p.name in uv_moms):
                            prop = next(p for p in ll.propagators if p.name in uv_moms)
                            prop.m_squared = mu_uv**2
                            ll.propagators[0].power = len(ll.propagators)
                            ll.propagators = [ll.propagators[0]]

                    loop_topos.append(loop_topo)

                # compute external state symmetry factor
                # TODO: filter bubbles
                cutkosky_particles = tuple(sorted(particle_ids[e] if e in particle_ids else 'NONE' for e in cut_name))
                sym_factor = 1.
                for x in set(cutkosky_particles):
                    sym_factor *= math.factorial(cutkosky_particles.count(x))

                uv_limit_info.append({
                    'cut_symmetry_factors': sym_factor,
                    'numerator_structure': numerator,
                    'loop_topos': loop_topos
                })

            self.cut_diagrams.append(uv_limit_info)

    def export(self, output_path):
        out = {
            'name': self.name,
            'n_loops': self.topo.n_loops,
            'overall_numerator': self.overall_numerator,
            'n_incoming_momenta': len(self.incoming_momenta),
            'external_momenta': [self.external_momenta["q%d"%n] for n in sorted([int(qi.replace("q","")) for qi in self.external_momenta.keys()])],
            'topo': [list(x) for x in self.topo.edge_map_lin],
            'loop_momentum_basis': [self.topo.edge_map_lin[e][0] for e in self.topo.loop_momenta],
            'e_cm_squared': sum(self.external_momenta[e][0] for e in self.incoming_momenta)**2 - sum(x*x for x in (sum(self.external_momenta[e][i] for e in self.incoming_momenta) for i in range(1, 4))),
            'cutkosky_cuts': [
                {
                    'cuts': [
                        {
                        'name': cut_edge['edge'],
                        'sign': cut_edge['sign'],
                        'level': cut_edge['level'],
                        'signature': cut_edge['signature'],
                        'm_squared': self.masses[cut_edge['edge']]**2 if cut_edge['edge'] in self.masses else 0.,
                        }
                        for cut_edge in cuts['cuts']
                    ],
                    'n_bubbles': cuts['n_bubbles'],
                    'uv_limits': [
                        {
                            'diagrams': [ x.to_flat_format() for x in d['loop_topos']],
                            'conjugate_deformation': [ False for _ in d['loop_topos']],
                            'numerator_tensor_coefficients': d['numerator_structure'],
                            'symmetry_factor': d['cut_symmetry_factors']
                        }
                    for d in diags]
                }

                for cuts, diags in zip(self.cuts, self.cut_diagrams)
            ]
        }

        try:
            import yaml
            from yaml import Loader, Dumper
        except ImportError:
            raise BaseException("Install yaml python module in order to import topologies from yaml.")

        open(output_path,'w').write(yaml.dump(out, Dumper=Dumper))

if __name__ == "__main__":
    ee_to_dd_2l_bubble = SquaredTopologyGenerator([('q1', 101, 1), ('q2', 102, 1), ('q3', 6, 103), ('q4', 6, 104), ('p1', 1, 2), ('p2', 2, 3), ('p3', 3, 4), ('p4', 4, 3),
    ('p5', 4, 5), ('p6', 5, 6), ('p7', 5, 2)],
        "ee_to_dd_2l_bubble", ['q1', 'q2'], 2, {'q1': [1., 0., 0., 1.], 'q2': [1., 0., 0., -1.], 'q3': [1., 0., 0., 1.], 'q4': [1., 0., 0., -1.]},
        loop_momenta_names=('p2', 'p3'),
        particle_ids={'p%s' % i: i for i in range(8)},
        overall_numerator=1.0,
        cut_filter={('p2', 'p3', 'p4', 'p7')},
        numerator_structure={('p3', 'p4', 'p7'):
            {():
            [[[0,4,4],[0.,-1.477080880741393e8]],
            [[0,5,5],[0.,-1.477080880741393e8]],
            [[0,6,6],[0.,-1.477080880741393e8]],
            [[0,7,7],[0.,-1.477080880741393e8]],
            [[0,4,4,4],[0.,-7.385404403706966e7]],
            [[0,4,5,5],[0.,-7.385404403706966e7]],
            [[0,4,6,6],[0.,-7.385404403706966e7]],
            [[0,4,7,7],[0.,+7.385404403706966e7]],
            [[1,4,5],[0.,+2.954161761482786e8]],
            [[1,4,4,5],[0.,+1.477080880741393e8]],
            [[1,5,7,7],[0.,-1.477080880741393e8]],
            [[2,4,6],[0.,+2.954161761482786e8]],
            [[2,4,4,6],[0.,+1.477080880741393e8]],
            [[2,6,7,7],[0.,-1.477080880741393e8]],
            [[3,4,7],[0.,+2.954161761482786e8]],
            [[3,4,4,7],[0.,+7.385404403706966e7]],
            [[3,5,5,7],[0.,+7.385404403706966e7]],
            [[3,6,6,7],[0.,+7.385404403706966e7]],
            [[3,7,7,7],[0.,-7.385404403706966e7]],
            [[0,0,4],[0.,+2.954161761482786e8]],
            [[0,0,4,4],[0.,+2.215621321112089e8]],
            [[0,0,5,5],[0.,+7.385404403706966e7]],
            [[0,0,6,6],[0.,+7.385404403706966e7]],
            [[0,0,7,7],[0.,-7.385404403706966e7]],
            [[0,1,4,5],[0.,-1.477080880741393e8]],
            [[0,2,4,6],[0.,-1.477080880741393e8]],
            [[0,3,4,7],[0.,-2.954161761482786e8]],
            [[1,1,4],[0.,-2.954161761482786e8]],
            [[1,1,4,4],[0.,-1.477080880741393e8]],
            [[1,1,7,7],[0.,+1.477080880741393e8]],
            [[1,3,5,7],[0.,+1.477080880741393e8]],
            [[2,2,4],[0.,-2.954161761482786e8]],
            [[2,2,4,4],[0.,-1.477080880741393e8]],
            [[2,2,7,7],[0.,+1.477080880741393e8]],
            [[2,3,6,7],[0.,+1.477080880741393e8]],
            [[3,3,4],[0.,-2.954161761482786e8]],
            [[3,3,4,4],[0.,-7.385404403706966e7]],
            [[3,3,5,5],[0.,-7.385404403706966e7]],
            [[3,3,6,6],[0.,-7.385404403706966e7]],
            [[3,3,7,7],[0.,+2.215621321112089e8]],
            [[0,0,0],[0.,-1.477080880741393e8]],
            [[0,0,0,4],[0.,-2.215621321112089e8]],
            [[0,0,3,7],[0.,+2.215621321112089e8]],
            [[0,1,1],[0.,+1.477080880741393e8]],
            [[0,1,1,4],[0.,+2.215621321112089e8]],
            [[0,2,2],[0.,+1.477080880741393e8]],
            [[0,2,2,4],[0.,+2.215621321112089e8]],
            [[0,3,3],[0.,+1.477080880741393e8]],
            [[0,3,3,4],[0.,+2.215621321112089e8]],
            [[1,1,3,7],[0.,-2.215621321112089e8]],
            [[2,2,3,7],[0.,-2.215621321112089e8]],
            [[3,3,3,7],[0.,-2.215621321112089e8]],
            [[0,0,0,0],[0.,+7.385404403706966e7]],
            [[0,0,1,1],[0.,-7.385404403706966e7]],
            [[0,0,2,2],[0.,-7.385404403706966e7]],
            [[0,0,3,3],[0.,-1.477080880741393e8]],
            [[1,1,3,3],[0.,+7.385404403706966e7]],
            [[2,2,3,3],[0.,+7.385404403706966e7]],
            [[3,3,3,3],[0.,+7.385404403706966e7]]]
            },
            ('p5','p3','p4','p7'):
            {():
            [[[4,8,8,8],[0.,-2.350847235165231e7]],
            [[4,8,9,9],[0.,-2.350847235165231e7]],
            [[4,8,10,10],[0.,-2.350847235165231e7]],
            [[4,8,11,11],[0.,-2.350847235165231e7]],
            [[5,8,8,9],[0.,+4.701694470330462e7]],
            [[6,8,8,10],[0.,+4.701694470330462e7]],
            [[7,8,8,11],[0.,+4.701694470330462e7]],
            [[4,4,8,8],[0.,+7.052541705495694e7]],
            [[4,4,9,9],[0.,+2.350847235165231e7]],
            [[4,4,10,10],[0.,+2.350847235165231e7]],
            [[4,4,11,11],[0.,+2.350847235165231e7]],
            [[4,5,8,9],[0.,-4.701694470330462e7]],
            [[4,6,8,10],[0.,-4.701694470330462e7]],
            [[4,7,8,11],[0.,-4.701694470330462e7]],
            [[5,5,8,8],[0.,-4.701694470330462e7]],
            [[6,6,8,8],[0.,-4.701694470330462e7]],
            [[7,7,8,8],[0.,-4.701694470330462e7]],
            [[4,4,4,8],[0.,-7.052541705495694e7]],
            [[4,5,5,8],[0.,+7.052541705495694e7]],
            [[4,6,6,8],[0.,+7.052541705495694e7]],
            [[4,7,7,8],[0.,+7.052541705495694e7]],
            [[4,4,4,4],[0.,+2.350847235165231e7]],
            [[4,4,5,5],[0.,-2.350847235165231e7]],
            [[4,4,6,6],[0.,-2.350847235165231e7]],
            [[4,4,7,7],[0.,-2.350847235165231e7]],
            [[0,4,8,8],[0.,+2.350847235165231e7]],
            [[0,4,9,9],[0.,+2.350847235165231e7]],
            [[0,4,10,10],[0.,+2.350847235165231e7]],
            [[0,4,11,11],[0.,+2.350847235165231e7]],
            [[0,4,8,8,8],[0.,+1.175423617582616e7]],
            [[0,4,8,9,9],[0.,+1.175423617582616e7]],
            [[0,4,8,10,10],[0.,+1.175423617582616e7]],
            [[0,4,8,11,11],[0.,+1.175423617582616e7]],
            [[0,5,8,9],[0.,-4.701694470330462e7]],
            [[0,5,8,8,9],[0.,-2.350847235165232e7]],
            [[0,6,8,10],[0.,-4.701694470330462e7]],
            [[0,6,8,8,10],[0.,-2.350847235165232e7]],
            [[0,7,8,11],[0.,-4.701694470330462e7]],
            [[0,7,8,8,11],[0.,-2.350847235165232e7]],
            [[0,4,4,8],[0.,-4.701694470330462e7]],
            [[0,4,4,8,8],[0.,-3.526270852747848e7]],
            [[0,4,4,9,9],[0.,-1.175423617582616e7]],
            [[0,4,4,10,10],[0.,-1.175423617582616e7]],
            [[0,4,4,11,11],[0.,-1.175423617582616e7]],
            [[0,4,5,8,9],[0.,+2.350847235165232e7]],
            [[0,4,6,8,10],[0.,+2.350847235165232e7]],
            [[0,4,7,8,11],[0.,+2.350847235165232e7]],
            [[0,5,5,8],[0.,+4.701694470330462e7]],
            [[0,5,5,8,8],[0.,+2.350847235165232e7]],
            [[0,6,6,8],[0.,+4.701694470330462e7]],
            [[0,6,6,8,8],[0.,+2.350847235165232e7]],
            [[0,7,7,8],[0.,+4.701694470330462e7]],
            [[0,7,7,8,8],[0.,+2.350847235165232e7]],
            [[0,4,4,4],[0.,+2.350847235165231e7]],
            [[0,4,4,4,8],[0.,+3.526270852747848e7]],
            [[0,4,5,5],[0.,-2.350847235165231e7]],
            [[0,4,5,5,8],[0.,-3.526270852747848e7]],
            [[0,4,6,6],[0.,-2.350847235165231e7]],
            [[0,4,6,6,8],[0.,-3.526270852747848e7]],
            [[0,4,7,7],[0.,-2.350847235165231e7]],
            [[0,4,7,7,8],[0.,-3.526270852747848e7]],
            [[0,4,4,4,4],[0.,-1.175423617582616e7]],
            [[0,4,4,5,5],[0.,+1.175423617582616e7]],
            [[0,4,4,6,6],[0.,+1.175423617582616e7]],
            [[0,4,4,7,7],[0.,+1.175423617582616e7]],
            [[3,4,8,8,11],[0.,-2.350847235165232e7]],
            [[3,5,8,9,11],[0.,+2.350847235165232e7]],
            [[3,6,8,10,11],[0.,+2.350847235165232e7]],
            [[3,7,8,8,8],[0.,+1.175423617582616e7]],
            [[3,7,8,9,9],[0.,-1.175423617582616e7]],
            [[3,7,8,10,10],[0.,-1.175423617582616e7]],
            [[3,7,8,11,11],[0.,+1.175423617582616e7]],
            [[3,4,4,8,11],[0.,+4.701694470330463e7]],
            [[3,4,5,9,11],[0.,-2.350847235165232e7]],
            [[3,4,6,10,11],[0.,-2.350847235165232e7]],
            [[3,4,7,8,8],[0.,-1.175423617582616e7]],
            [[3,4,7,9,9],[0.,+1.175423617582616e7]],
            [[3,4,7,10,10],[0.,+1.175423617582616e7]],
            [[3,4,7,11,11],[0.,-1.175423617582616e7]],
            [[3,5,5,8,11],[0.,-2.350847235165232e7]],
            [[3,6,6,8,11],[0.,-2.350847235165232e7]],
            [[3,7,7,8,11],[0.,-2.350847235165232e7]],
            [[3,4,4,4,11],[0.,-2.350847235165232e7]],
            [[3,4,4,7,8],[0.,-1.175423617582616e7]],
            [[3,4,5,5,11],[0.,+2.350847235165232e7]],
            [[3,4,6,6,11],[0.,+2.350847235165232e7]],
            [[3,4,7,7,11],[0.,+2.350847235165232e7]],
            [[3,5,5,7,8],[0.,+1.175423617582616e7]],
            [[3,6,6,7,8],[0.,+1.175423617582616e7]],
            [[3,7,7,7,8],[0.,+1.175423617582616e7]],
            [[3,4,4,4,7],[0.,+1.175423617582616e7]],
            [[3,4,5,5,7],[0.,-1.175423617582616e7]],
            [[3,4,6,6,7],[0.,-1.175423617582616e7]],
            [[3,4,7,7,7],[0.,-1.175423617582616e7]],
            [[0,0,4,8,8],[0.,-1.175423617582616e7]],
            [[0,0,4,9,9],[0.,-1.175423617582616e7]],
            [[0,0,4,10,10],[0.,-1.175423617582616e7]],
            [[0,0,4,11,11],[0.,-1.175423617582616e7]],
            [[0,0,5,8,9],[0.,+2.350847235165232e7]],
            [[0,0,6,8,10],[0.,+2.350847235165232e7]],
            [[0,0,7,8,11],[0.,+2.350847235165232e7]],
            [[0,0,4,4,8],[0.,+2.350847235165232e7]],
            [[0,0,5,5,8],[0.,-2.350847235165232e7]],
            [[0,0,6,6,8],[0.,-2.350847235165232e7]],
            [[0,0,7,7,8],[0.,-2.350847235165232e7]],
            [[0,0,4,4,4],[0.,-1.175423617582616e7]],
            [[0,0,4,5,5],[0.,+1.175423617582616e7]],
            [[0,0,4,6,6],[0.,+1.175423617582616e7]],
            [[0,0,4,7,7],[0.,+1.175423617582616e7]],
            [[0,3,4,8,11],[0.,+2.350847235165232e7]],
            [[0,3,5,9,11],[0.,-2.350847235165232e7]],
            [[0,3,6,10,11],[0.,-2.350847235165232e7]],
            [[0,3,7,8,8],[0.,-1.175423617582616e7]],
            [[0,3,7,9,9],[0.,+1.175423617582616e7]],
            [[0,3,7,10,10],[0.,+1.175423617582616e7]],
            [[0,3,7,11,11],[0.,-1.175423617582616e7]],
            [[0,3,4,4,11],[0.,-2.350847235165232e7]],
            [[0,3,5,5,11],[0.,+2.350847235165232e7]],
            [[0,3,6,6,11],[0.,+2.350847235165232e7]],
            [[0,3,7,7,11],[0.,+2.350847235165232e7]],
            [[0,3,4,4,7],[0.,+1.175423617582616e7]],
            [[0,3,5,5,7],[0.,-1.175423617582616e7]],
            [[0,3,6,6,7],[0.,-1.175423617582616e7]],
            [[0,3,7,7,7],[0.,-1.175423617582616e7]]]
            },
            ('p2','p3','p4','p7'):
            {():
            [[[4,8,8,8],[0.,+2.350847235165231e7]],
            [[4,8,9,9],[0.,+2.350847235165231e7]],
            [[4,8,10,10],[0.,+2.350847235165231e7]],
            [[4,8,11,11],[0.,+2.350847235165231e7]],
            [[5,8,8,9],[0.,-4.701694470330462e7]],
            [[6,8,8,10],[0.,-4.701694470330462e7]],
            [[7,8,8,11],[0.,-4.701694470330462e7]],
            [[4,4,8,8],[0.,-7.052541705495694e7]],
            [[4,4,9,9],[0.,-2.350847235165231e7]],
            [[4,4,10,10],[0.,-2.350847235165231e7]],
            [[4,4,11,11],[0.,-2.350847235165231e7]],
            [[4,5,8,9],[0.,+4.701694470330462e7]],
            [[4,6,8,10],[0.,+4.701694470330462e7]],
            [[4,7,8,11],[0.,+4.701694470330462e7]],
            [[5,5,8,8],[0.,+4.701694470330462e7]],
            [[6,6,8,8],[0.,+4.701694470330462e7]],
            [[7,7,8,8],[0.,+4.701694470330462e7]],
            [[4,4,4,8],[0.,+7.052541705495694e7]],
            [[4,5,5,8],[0.,-7.052541705495694e7]],
            [[4,6,6,8],[0.,-7.052541705495694e7]],
            [[4,7,7,8],[0.,-7.052541705495694e7]],
            [[4,4,4,4],[0.,-2.350847235165231e7]],
            [[4,4,5,5],[0.,+2.350847235165231e7]],
            [[4,4,6,6],[0.,+2.350847235165231e7]],
            [[4,4,7,7],[0.,+2.350847235165231e7]],
            [[0,4,8,8],[0.,-2.350847235165231e7]],
            [[0,4,9,9],[0.,-2.350847235165231e7]],
            [[0,4,10,10],[0.,-2.350847235165231e7]],
            [[0,4,11,11],[0.,-2.350847235165231e7]],
            [[0,4,8,8,8],[0.,-1.175423617582616e7]],
            [[0,4,8,9,9],[0.,-1.175423617582616e7]],
            [[0,4,8,10,10],[0.,-1.175423617582616e7]],
            [[0,4,8,11,11],[0.,-1.175423617582616e7]],
            [[0,5,8,9],[0.,+4.701694470330462e7]],
            [[0,5,8,8,9],[0.,+2.350847235165232e7]],
            [[0,6,8,10],[0.,+4.701694470330462e7]],
            [[0,6,8,8,10],[0.,+2.350847235165232e7]],
            [[0,7,8,11],[0.,+4.701694470330462e7]],
            [[0,7,8,8,11],[0.,+2.350847235165232e7]],
            [[0,4,4,8],[0.,+4.701694470330462e7]],
            [[0,4,4,8,8],[0.,+3.526270852747848e7]],
            [[0,4,4,9,9],[0.,+1.175423617582616e7]],
            [[0,4,4,10,10],[0.,+1.175423617582616e7]],
            [[0,4,4,11,11],[0.,+1.175423617582616e7]],
            [[0,4,5,8,9],[0.,-2.350847235165232e7]],
            [[0,4,6,8,10],[0.,-2.350847235165232e7]],
            [[0,4,7,8,11],[0.,-2.350847235165232e7]],
            [[0,5,5,8],[0.,-4.701694470330462e7]],
            [[0,5,5,8,8],[0.,-2.350847235165232e7]],
            [[0,6,6,8],[0.,-4.701694470330462e7]],
            [[0,6,6,8,8],[0.,-2.350847235165232e7]],
            [[0,7,7,8],[0.,-4.701694470330462e7]],
            [[0,7,7,8,8],[0.,-2.350847235165232e7]],
            [[0,4,4,4],[0.,-2.350847235165231e7]],
            [[0,4,4,4,8],[0.,-3.526270852747848e7]],
            [[0,4,5,5],[0.,+2.350847235165231e7]],
            [[0,4,5,5,8],[0.,+3.526270852747848e7]],
            [[0,4,6,6],[0.,+2.350847235165231e7]],
            [[0,4,6,6,8],[0.,+3.526270852747848e7]],
            [[0,4,7,7],[0.,+2.350847235165231e7]],
            [[0,4,7,7,8],[0.,+3.526270852747848e7]],
            [[0,4,4,4,4],[0.,+1.175423617582616e7]],
            [[0,4,4,5,5],[0.,-1.175423617582616e7]],
            [[0,4,4,6,6],[0.,-1.175423617582616e7]],
            [[0,4,4,7,7],[0.,-1.175423617582616e7]],
            [[3,4,8,8,11],[0.,+2.350847235165232e7]],
            [[3,5,8,9,11],[0.,-2.350847235165232e7]],
            [[3,6,8,10,11],[0.,-2.350847235165232e7]],
            [[3,7,8,8,8],[0.,-1.175423617582616e7]],
            [[3,7,8,9,9],[0.,+1.175423617582616e7]],
            [[3,7,8,10,10],[0.,+1.175423617582616e7]],
            [[3,7,8,11,11],[0.,-1.175423617582616e7]],
            [[3,4,4,8,11],[0.,-4.701694470330463e7]],
            [[3,4,5,9,11],[0.,+2.350847235165232e7]],
            [[3,4,6,10,11],[0.,+2.350847235165232e7]],
            [[3,4,7,8,8],[0.,+1.175423617582616e7]],
            [[3,4,7,9,9],[0.,-1.175423617582616e7]],
            [[3,4,7,10,10],[0.,-1.175423617582616e7]],
            [[3,4,7,11,11],[0.,+1.175423617582616e7]],
            [[3,5,5,8,11],[0.,+2.350847235165232e7]],
            [[3,6,6,8,11],[0.,+2.350847235165232e7]],
            [[3,7,7,8,11],[0.,+2.350847235165232e7]],
            [[3,4,4,4,11],[0.,+2.350847235165232e7]],
            [[3,4,4,7,8],[0.,+1.175423617582616e7]],
            [[3,4,5,5,11],[0.,-2.350847235165232e7]],
            [[3,4,6,6,11],[0.,-2.350847235165232e7]],
            [[3,4,7,7,11],[0.,-2.350847235165232e7]],
            [[3,5,5,7,8],[0.,-1.175423617582616e7]],
            [[3,6,6,7,8],[0.,-1.175423617582616e7]],
            [[3,7,7,7,8],[0.,-1.175423617582616e7]],
            [[3,4,4,4,7],[0.,-1.175423617582616e7]],
            [[3,4,5,5,7],[0.,+1.175423617582616e7]],
            [[3,4,6,6,7],[0.,+1.175423617582616e7]],
            [[3,4,7,7,7],[0.,+1.175423617582616e7]],
            [[0,0,4,8,8],[0.,+1.175423617582616e7]],
            [[0,0,4,9,9],[0.,+1.175423617582616e7]],
            [[0,0,4,10,10],[0.,+1.175423617582616e7]],
            [[0,0,4,11,11],[0.,+1.175423617582616e7]],
            [[0,0,5,8,9],[0.,-2.350847235165232e7]],
            [[0,0,6,8,10],[0.,-2.350847235165232e7]],
            [[0,0,7,8,11],[0.,-2.350847235165232e7]],
            [[0,0,4,4,8],[0.,-2.350847235165232e7]],
            [[0,0,5,5,8],[0.,+2.350847235165232e7]],
            [[0,0,6,6,8],[0.,+2.350847235165232e7]],
            [[0,0,7,7,8],[0.,+2.350847235165232e7]],
            [[0,0,4,4,4],[0.,+1.175423617582616e7]],
            [[0,0,4,5,5],[0.,-1.175423617582616e7]],
            [[0,0,4,6,6],[0.,-1.175423617582616e7]],
            [[0,0,4,7,7],[0.,-1.175423617582616e7]],
            [[0,3,4,8,11],[0.,-2.350847235165232e7]],
            [[0,3,5,9,11],[0.,+2.350847235165232e7]],
            [[0,3,6,10,11],[0.,+2.350847235165232e7]],
            [[0,3,7,8,8],[0.,+1.175423617582616e7]],
            [[0,3,7,9,9],[0.,-1.175423617582616e7]],
            [[0,3,7,10,10],[0.,-1.175423617582616e7]],
            [[0,3,7,11,11],[0.,+1.175423617582616e7]],
            [[0,3,4,4,11],[0.,+2.350847235165232e7]],
            [[0,3,5,5,11],[0.,-2.350847235165232e7]],
            [[0,3,6,6,11],[0.,-2.350847235165232e7]],
            [[0,3,7,7,11],[0.,-2.350847235165232e7]],
            [[0,3,4,4,7],[0.,-1.175423617582616e7]],
            [[0,3,5,5,7],[0.,+1.175423617582616e7]],
            [[0,3,6,6,7],[0.,+1.175423617582616e7]],
            [[0,3,7,7,7],[0.,+1.175423617582616e7]]]
        }
        })
    ee_to_dd_2l_bubble.export('ee_to_dd_2l_bubble.yaml')

    #ee_to_dd_3l_nested = SquaredTopologyGenerator([('q1', 101, 1), ('q2', 102, 1), ('q3', 8, 103), ('q4', 8, 104), ('p1', 1, 2), ('p2', 2, 3), ('p3', 3, 4), ('p4', 4, 5),
    #('p5', 5, 6), ('p6', 6, 3), ('p7', 6, 7), ('p8', 7, 8), ('p9', 7, 2), ('p10', 5, 4)],
    #    "ee_to_dd_3l_bubble", ['q1', 'q2'], 2, {'q1': [1., 0., 0., 1.], 'q2': [1., 0., 0., -1.], 'q3': [1., 0., 0., 1.], 'q4': [1., 0., 0., -1.]},
    #    loop_momenta_names=('p2', 'p3', 'p4'),
    #    particle_ids={'p%s' % i: i for i in range(11)},
    #    overall_numerator=1.0)
    #ee_to_dd_3l_nested.export('ee_to_dd_3l_nested.yaml')

    #ee_to_dd_3l_two_bubble_one_line = SquaredTopologyGenerator([('q1', 101, 1), ('q2', 102, 1), ('q3', 8, 103), ('q4', 8, 104), ('p1', 1, 2), ('p2', 2, 3), ('p3', 3, 4), ('p4', 4, 3),
    #('p5', 4, 5), ('p6', 5, 6), ('p7', 6, 5), ('p8', 6, 7), ('p9', 7, 8), ('p10', 7, 2)],
    #    "ee_to_dd_3l_bubble", ['q1', 'q2'], 2, {'q1': [1., 0., 0., 1.], 'q2': [1., 0., 0., -1.], 'q3': [1., 0., 0., 1.], 'q4': [1., 0., 0., -1.]},
    #    loop_momenta_names=('p2', 'p3', 'p6'),
    #    particle_ids={'p%s' % i: i for i in range(11)},
    #    overall_numerator=1.0)

    # Construct a cross section
    # result is -2 Zeta[3] 3 Pi/(16 Pi^2)^3 = -5.75396*10^-6
    mercedes = SquaredTopologyGenerator([('q1', 0, 1), ('p1', 1, 2), ('p2', 2, 3), ('p3', 3, 6),
                                        ('p4', 6, 5), ('p5', 5, 1), ('p6', 2, 4), ('p7', 3, 4), ('p8', 4, 5), ('q2', 6, 7)], "M", ['q1'], 2,
                                        {'q1': [1., 0., 0., 0.], 'q2': [1., 0., 0., 0.]},
                                        loop_momenta_names=('p1', 'p2', 'p3'),
                                        particle_ids={'p%s' % i: i for i in range(9)})
    mercedes.export('mercedes_squared.yaml')

    # result is -5 Zeta[5] 4 Pi/(16 Pi^2)^4 = -1.04773*10^-7
    doublemercedes = SquaredTopologyGenerator([('q1', 0, 1), ('p1', 1, 2), ('p2', 2, 7), ('p3', 7, 3), ('p4', 3, 6),
                                        ('p5', 6, 5), ('p6', 5, 1), ('p7', 2, 4), ('p8', 3, 4), ('p9', 4, 5), ('p10', 7, 4), ('q2', 6, 8)], "DM", ['q1'], 2,
                                        {'q1': [1., 0., 0., 0.], 'q2': [1., 0., 0., 0.]},
                                        loop_momenta_names=('p1', 'p2', 'p3', 'p4'),
                                        particle_ids={'p%s' % i: i for i in range(11)})
    doublemercedes.export('doublemercedes_squared.yaml')

    bubble = SquaredTopologyGenerator([('q1', 0, 1), ('p1', 1, 2), ('p2', 1, 2), ('q2', 2, 3)], "B", ['q1'], 0,
    {'q1': [2., 0., 0., 0.], 'q2': [2., 0., 0., 0.]},
    masses={'p1': 0.24, 'p2': 0.24})
    bubble.export('bubble_squared.yaml')

    gamma_to_dd_1l = SquaredTopologyGenerator([('q1', 0, 1), ('p1', 1, 2), ('p2', 1, 2), ('q2', 2, 3)], "gamma_to_dd_1l", ['q1'], 0,
        {'q1': [2., 0., 0., 0.], 'q2': [2., 0., 0., 0.]},
        particle_ids={'p%s' % i: i for i in range(3)},
        overall_numerator=0.25,
        numerator_structure={('p1', 'p2'):
            { ():
                [[[0], (-1.49418e8, 0.)],
                [[0, 0], (7.47091e7, 0.)],
                [[3, 3], (-7.47091e7, 0.)]]
            }
        }
        )
    gamma_to_dd_1l.export('gamma_to_dd_1l.yaml')

    ee_to_dd_1l = SquaredTopologyGenerator([('q1', 101, 1), ('q2', 102, 1), ('q3', 4, 103), ('q4', 4, 104), ('p1', 1, 2), ('p2', 2, 3), ('p3', 2, 3), ('p4', 3, 4)], 
        "ee_to_dd_1l", ['q1', 'q2'], 2, {'q1': [1., 0., 0., 1.], 'q2': [1., 0., 0., -1.], 'q3': [1., 0., 0., 1.], 'q4': [1., 0., 0., -1.]},
        particle_ids={'p%s' % i: i for i in range(6)},
        overall_numerator=0.25,
        numerator_structure={('p2', 'p3'):
            { ():
                [[[0], (-1.49418e8, 0.)],
                [[0, 0], (7.47091e7, 0.)],
                [[3, 3], (-7.47091e7, 0.)]]
            }
        }
        )
    ee_to_dd_1l.export('ee_to_dd_1l.yaml')

    ee_to_dd_2l = SquaredTopologyGenerator([('q1', 101, 1), ('q2', 102, 1), ('q3', 6, 103), ('q4', 6, 104), ('p1', 1, 2), ('p2', 2, 3), ('p3', 3, 5), ('p4', 5, 6),
    ('p5',5, 4), ('p6', 4, 2), ('p7', 4, 3)],
        "ee_to_dd_2l", ['q1', 'q2'], 2, {'q1': [1., 0., 0., 1.], 'q2': [1., 0., 0., -1.], 'q3': [1., 0., 0., 1.], 'q4': [1., 0., 0., -1.]},
        loop_momenta_names=('p2', 'p3'),
        particle_ids={'p%s' % i: i for i in range(8)},
        overall_numerator=1.0,
#        cut_filter={('p3', 'p5')},
        numerator_structure={('p2', 'p5', 'p7'):
            { (): # uv structure
            [[[0,4],[0.,+2.954161761482786e8]],
            [[0,4,4],[0.,+1.477080880741393e8]],
            [[0,7,7],[0.,-1.477080880741393e8]],
            [[1,5],[0.,-2.954161761482786e8]],
            [[1,4,5],[0.,-1.477080880741393e8]],
            [[2,6],[0.,-2.954161761482786e8]],
            [[2,4,6],[0.,-1.477080880741393e8]],
            [[3,7],[0.,-2.954161761482786e8]],
            [[0,0,4],[0.,-1.477080880741393e8]],
            [[0,0,4,4],[0.,-7.385404403706966e7]],
            [[0,0,5,5],[0.,+7.385404403706966e7]],
            [[0,0,6,6],[0.,+7.385404403706966e7]],
            [[0,0,7,7],[0.,+7.385404403706966e7]],
            [[0,1,5],[0.,+1.477080880741393e8]],
            [[0,1,4,5],[0.,+1.477080880741393e8]],
            [[0,2,6],[0.,+1.477080880741393e8]],
            [[0,2,4,6],[0.,+1.477080880741393e8]],
            [[1,1,5,5],[0.,-1.477080880741393e8]],
            [[1,2,5,6],[0.,-2.954161761482786e8]],
            [[1,3,5,7],[0.,-1.477080880741393e8]],
            [[2,2,6,6],[0.,-1.477080880741393e8]],
            [[2,3,6,7],[0.,-1.477080880741393e8]],
            [[3,3,4],[0.,+1.477080880741393e8]],
            [[3,3,4,4],[0.,+7.385404403706966e7]],
            [[3,3,5,5],[0.,-7.385404403706966e7]],
            [[3,3,6,6],[0.,-7.385404403706966e7]],
            [[3,3,7,7],[0.,-7.385404403706966e7]]]
            },
            ('p3', 'p6', 'p7'):
            { (): # uv structure
            [[[0,4],[0.,+2.954161761482786e8]],
            [[0,4,4],[0.,+1.477080880741393e8]],
            [[0,7,7],[0.,-1.477080880741393e8]],
            [[1,5],[0.,-2.954161761482786e8]],
            [[1,4,5],[0.,-1.477080880741393e8]],
            [[2,6],[0.,-2.954161761482786e8]],
            [[2,4,6],[0.,-1.477080880741393e8]],
            [[3,7],[0.,-2.954161761482786e8]],
            [[0,0,4],[0.,-1.477080880741393e8]],
            [[0,0,4,4],[0.,-7.385404403706966e7]],
            [[0,0,5,5],[0.,+7.385404403706966e7]],
            [[0,0,6,6],[0.,+7.385404403706966e7]],
            [[0,0,7,7],[0.,+7.385404403706966e7]],
            [[0,1,5],[0.,+1.477080880741393e8]],
            [[0,1,4,5],[0.,+1.477080880741393e8]],
            [[0,2,6],[0.,+1.477080880741393e8]],
            [[0,2,4,6],[0.,+1.477080880741393e8]],
            [[1,1,5,5],[0.,-1.477080880741393e8]],
            [[1,2,5,6],[0.,-2.954161761482786e8]],
            [[1,3,5,7],[0.,-1.477080880741393e8]],
            [[2,2,6,6],[0.,-1.477080880741393e8]],
            [[2,3,6,7],[0.,-1.477080880741393e8]],
            [[3,3,4],[0.,+1.477080880741393e8]],
            [[3,3,4,4],[0.,+7.385404403706966e7]],
            [[3,3,5,5],[0.,-7.385404403706966e7]],
            [[3,3,6,6],[0.,-7.385404403706966e7]],
            [[3,3,7,7],[0.,-7.385404403706966e7]]]
            },
            ('p2', 'p6'):
            {():
            [[[0,4],[0.,-2.954161761482786e8]],
            [[0,4,4],[0.,+1.477080880741393e8]],
            [[0,7,7],[0.,-1.477080880741393e8]],
            [[1,4,5],[0.,-1.477080880741393e8]],
            [[2,4,6],[0.,-1.477080880741393e8]],
            [[3,7],[0.,-2.954161761482786e8]],
            [[0,0,4],[0.,+1.477080880741393e8]],
            [[0,0,4,4],[0.,-7.385404403706966e7]],
            [[0,0,5,5],[0.,+7.385404403706966e7]],
            [[0,0,6,6],[0.,+7.385404403706966e7]],
            [[0,0,7,7],[0.,+7.385404403706966e7]],
            [[0,1,5],[0.,-1.477080880741393e8]],
            [[0,1,4,5],[0.,+1.477080880741393e8]],
            [[0,2,6],[0.,-1.477080880741393e8]],
            [[0,2,4,6],[0.,+1.477080880741393e8]],
            [[1,1,5,5],[0.,-1.477080880741393e8]],
            [[1,2,5,6],[0.,-2.954161761482786e8]],
            [[1,3,5,7],[0.,-1.477080880741393e8]],
            [[2,2,6,6],[0.,-1.477080880741393e8]],
            [[2,3,6,7],[0.,-1.477080880741393e8]],
            [[3,3,4],[0.,-1.477080880741393e8]],
            [[3,3,4,4],[0.,+7.385404403706966e7]],
            [[3,3,5,5],[0.,-7.385404403706966e7]],
            [[3,3,6,6],[0.,-7.385404403706966e7]],
            [[3,3,7,7],[0.,-7.385404403706966e7]]],
            ('p3',):
            [[[0],[0.,+4.726658818372458e9]],
            [[0,4,4],[0.,-1.477080880741393e8]],
            [[0,7,7],[0.,+1.477080880741393e8]],
            [[1,4,5],[0.,+1.477080880741393e8]],
            [[2,4,6],[0.,+1.477080880741393e8]],
            [[0,0],[0.,-2.363329409186229e9]],
            [[0,0,4,4],[0.,+7.385404403706966e7]],
            [[0,0,5,5],[0.,-7.385404403706966e7]],
            [[0,0,6,6],[0.,-7.385404403706966e7]],
            [[0,0,7,7],[0.,-7.385404403706966e7]],
            [[0,1,4,5],[0.,-1.477080880741393e8]],
            [[0,2,4,6],[0.,-1.477080880741393e8]],
            [[1,1,5,5],[0.,+1.477080880741393e8]],
            [[1,2,5,6],[0.,+2.954161761482786e8]],
            [[1,3,5,7],[0.,+1.477080880741393e8]],
            [[2,2,6,6],[0.,+1.477080880741393e8]],
            [[2,3,6,7],[0.,+1.477080880741393e8]],
            [[3,3],[0.,+2.363329409186229e9]],
            [[3,3,4,4],[0.,-7.385404403706966e7]],
            [[3,3,5,5],[0.,+7.385404403706966e7]],
            [[3,3,6,6],[0.,+7.385404403706966e7]],
            [[3,3,7,7],[0.,+7.385404403706966e7]]]
            },
            ('p3', 'p5'):
            {():
                [[[0,4],[0.,-2.954161761482786e8]],
                [[0,4,4],[0.,+1.477080880741393e8]],
                [[0,7,7],[0.,-1.477080880741393e8]],
                [[1,4,5],[0.,-1.477080880741393e8]],
                [[2,4,6],[0.,-1.477080880741393e8]],
                [[3,7],[0.,-2.954161761482786e8]],
                [[0,0,4],[0.,+1.477080880741393e8]],
                [[0,0,4,4],[0.,-7.385404403706966e7]],
                [[0,0,5,5],[0.,+7.385404403706966e7]],
                [[0,0,6,6],[0.,+7.385404403706966e7]],
                [[0,0,7,7],[0.,+7.385404403706966e7]],
                [[0,1,5],[0.,-1.477080880741393e8]],
                [[0,1,4,5],[0.,+1.477080880741393e8]],
                [[0,2,6],[0.,-1.477080880741393e8]],
                [[0,2,4,6],[0.,+1.477080880741393e8]],
                [[1,1,5,5],[0.,-1.477080880741393e8]],
                [[1,2,5,6],[0.,-2.954161761482786e8]],
                [[1,3,5,7],[0.,-1.477080880741393e8]],
                [[2,2,6,6],[0.,-1.477080880741393e8]],
                [[2,3,6,7],[0.,-1.477080880741393e8]],
                [[3,3,4],[0.,-1.477080880741393e8]],
                [[3,3,4,4],[0.,+7.385404403706966e7]],
                [[3,3,5,5],[0.,-7.385404403706966e7]],
                [[3,3,6,6],[0.,-7.385404403706966e7]],
                [[3,3,7,7],[0.,-7.385404403706966e7]]],
            ('p2',):
                [[[0],[0.,4.726658818372458e9]],
                [[0,4,4],[0.,-1.477080880741393e8]],
                [[0,7,7],[0.,1.477080880741393e8]],
                [[1,4,5],[0.,1.477080880741393e8]],
                [[2,4,6],[0.,1.477080880741393e8]],
                [[0,0],[0.,-2.363329409186229e9]],
                [[0,0,4,4],[0.,7.385404403706966e7]],
                [[0,0,5,5],[0.,-7.385404403706966e7]],
                [[0,0,6,6],[0.,-7.385404403706966e7]],
                [[0,0,7,7],[0.,-7.385404403706966e7]],
                [[0,1,4,5],[0.,-1.477080880741393e8]],
                [[0,2,4,6],[0.,-1.477080880741393e8]],
                [[1,1,5,5],[0.,1.477080880741393e8]],
                [[1,2,5,6],[0.,2.954161761482786e8]],
                [[1,3,5,7],[0.,1.477080880741393e8]],
                [[2,2,6,6],[0.,1.477080880741393e8]],
                [[2,3,6,7],[0.,1.477080880741393e8]],
                [[3,3],[0.,2.363329409186229e9]],
                [[3,3,4,4],[0.,-7.385404403706966e7]],
                [[3,3,5,5],[0.,7.385404403706966e7]],
                [[3,3,6,6],[0.,7.385404403706966e7]],
                [[3,3,7,7],[0.,7.385404403706966e7]]]
            },
            }
        )
    ee_to_dd_2l.export('ee_to_dd_2l.yaml')

    t1 = SquaredTopologyGenerator([('q1', 0, 1), ('p1', 1, 2), ('p2', 2, 3), ('p3', 4, 3), ('p4', 4, 1), ('p5', 2, 4), ('q2', 3, 5)], "T", ['q1'], 2,
        {'q1': [1., 0., 0., 0.], 'q2': [1., 0., 0., 0.]},
        particle_ids={'p%s' % i: i for i in range(9)})
            #masses={'p1': 100, 'p2':100, 'p3': 100, 'p4': 100, 'p5': 100})
    t1.export('t1_squared.yaml')

    bu = SquaredTopologyGenerator([('q1', 0, 1), ('p1', 1, 2), ('p2', 3, 2), ('p3', 4, 3),
                                        ('p4', 4, 1), ('p5', 2, 5), ('p6', 5, 4), ('p7', 3, 5), ('q2', 3, 6)], "BU", ['q1'], 2,
                                        {'q1': [1., 0., 0., 0.], 'q2': [1., 0., 0., 0.]},
                                        loop_momenta_names=('p2', 'p4', 'p7'),
                                        particle_ids={'p%s' % i: i for i in range(9)})
    bu.export('bu_squared.yaml')
    
    insertion = SquaredTopologyGenerator([('q1', 0, 1), ('p1', 1, 2), ('p2', 2, 3), ('p3', 2, 3), ('p4', 3, 4), ('p5', 1, 4), ('q2', 4, 5)], "I", ['q1'], 3,
        {'q1': [1., 0., 0., 0.], 'q2': [1., 0., 0., 0.]},
        masses={'p1': 100, 'p2':100, 'p3': 100, 'p4': 100, 'p5': 100})#, loop_momenta_names=('p4', 'p3'), powers={'p3': 2})
    insertion.export('insertion_squared.yaml')

    # TODO: whether it's t and tbar should be determined from the cutkosky cut direction and not hardcoded in the topology
    # NOTE: for 2 -> N, the first two entries need to be the two incoming momenta
    # the outgoing momenta will be set to the input momenta in the same order, i.e., q3=q1, q4=q2.
    tth = SquaredTopologyGenerator([('q1', 0, 1), ('q2', 6, 7), ('q3', 4, 5), ('q4', 10, 11), ('p1', 1, 2), ('p2', 2, 3), ('p3', 3, 4), ('p4', 4, 10),
        ('p5', 10, 9), ('p6', 9, 8), ('p7', 8, 7), ('p8', 1, 7), ('p9', 2, 8), ('p10', 3, 9), ], "TTH", ['q1', 'q2'], 0,
        {'q1': [1., 0., 0., 1.], 'q2': [1., 0., 0., -1.], 'q3': [1., 0., 0., 1.], 'q4': [1., 0., 0., -1.]},
        final_state_particle_ids=('t', 'tbar', 'H'), particle_ids={'p1': 't', 'p2': 't', 'p3': 't', 'p4': 'tbar', 'p5': 'tbar', 'p6': 'tbar', 'p7': 'tbar',
            'p8': 't', 'p9': 'g', 'p10': 'H'})
    tth.export('tth_squared.yaml')

    two_to_two = SquaredTopologyGenerator([('q1', 0, 1), ('q2', 7, 5), ('q3', 2, 8), ('q4', 4, 9), ('p1', 1, 2), ('p2', 2, 3), ('p3', 3, 4), ('p4', 4, 5),
        ('p5', 5, 6), ('p6', 6, 1), ('p7', 6, 3), ], "two_to_two", ['q1', 'q2'], 3,
        {'q1': [1., 0., 0., 1.], 'q2': [1., 0., 0., -1.], 'q3': [1., 0., 0., 1.], 'q4': [1., 0., 0., -1.]},
        masses={'p1': 100, 'p2':100, 'p3': 100, 'p4': 100, 'p5': 100, 'p6': 100, 'p7': 100}, loop_momenta_names=('p1', 'p7'),)
    two_to_two.export('two_to_two_squared.yaml')

    twoI_twoF = SquaredTopologyGenerator([('q1', 101, 1), ('q2', 102, 2), ('q3', 4, 104), ('q4', 3, 103), ('p1', 1, 2), ('p2', 2, 3), ('p3', 3, 4), ('p4', 4, 1),], "twoI_twoF", ['q1', 'q2'], 2,
        {'q1': [1., 0., 0., 1.], 'q2': [1., 0., 0., -1.], 'q3': [1., 0., 0., 1.], 'q4': [1., 0., 0., -1.]},
        masses={'p1': 0., 'p2': 1., 'p3': 0., 'p4': 1.}, loop_momenta_names=('p1',))
    twoI_twoF.export('twoI_twoF_squared.yaml')

    two_to_three = SquaredTopologyGenerator([('q1', 101, 1), ('q2', 102, 2), ('q3', 6, 103), ('q4', 5, 104), ('p1', 2, 3), ('p2', 3, 4),
        ('p3', 3, 4), ('p4', 4, 5), ('p5', 5, 6), ('p6', 6, 1), ('p7', 1, 2)], "two_to_three", ['q1', 'q2'], 3,
        {'q1': [1., 0., 0., 1.], 'q2': [1., 0., 0., -1.], 'q3': [1., 0., 0., 1.], 'q4': [1., 0., 0., -1.]},
        masses={'p1': 1.0, 'p2': 1.0, 'p3': 1.0, 'p4': 1.0, 'p6': 1.0},
        particle_ids={'p2': 1, 'p3': 2, 'p6': 3})
    two_to_three.export('two_to_three_squared.yaml')
